"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[7103],{3905:function(e,n,a){a.d(n,{Zo:function(){return u},kt:function(){return m}});var t=a(67294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=t.createContext({}),l=function(e){var n=t.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},u=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(a),m=o,b=d["".concat(c,".").concat(m)]||d[m]||p[m]||r;return a?t.createElement(b,s(s({ref:n},u),{},{components:a})):t.createElement(b,s({ref:n},u))}));function m(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=a[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},42940:function(e,n,a){a.r(n),a.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var t=a(87462),o=a(63366),r=(a(67294),a(3905)),s=["components"],i={sidebar_label:"Constructores",slug:"/clases/objetos/apuntes/constructores",hide_table_of_contents:!1,hide_title:!0,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},c=void 0,l={unversionedId:"clases/objetos/Apuntes/constructores",id:"clases/objetos/Apuntes/constructores",title:"constructores",description:"Constructores",source:"@site/docs/clases/03-objetos/Apuntes/04-constructores.md",sourceDirName:"clases/03-objetos/Apuntes",slug:"/clases/objetos/apuntes/constructores",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/objetos/apuntes/constructores",draft:!1,tags:[],version:"current",lastUpdatedBy:"unknown",lastUpdatedAt:1656297542,formattedLastUpdatedAt:"6/26/2022",sidebarPosition:4,frontMatter:{sidebar_label:"Constructores",slug:"/clases/objetos/apuntes/constructores",hide_table_of_contents:!1,hide_title:!0,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},sidebar:"Clases",previous:{title:"Objetos",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/objetos/apuntes/objetos"},next:{title:"Cuestionario",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/objetos/apuntes/cuestionario"}},u={},p=[{value:"Constructores",id:"constructores",level:2},{value:"Constructores de Instancia",id:"constructores-de-instancia",level:3},{value:"Constructores Est\xe1ticos",id:"constructores-est\xe1ticos",level:3}],d={toc:p};function m(e){var n=e.components,a=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"constructores"},"Constructores"),(0,r.kt)("p",null,"Los constructores permiten al programador establecer valores predeterminados, limitar la creaci\xf3n de instancias y escribir c\xf3digo que sea flexible y f\xe1cil de leer."),(0,r.kt)("h3",{id:"constructores-de-instancia"},"Constructores de Instancia"),(0,r.kt)("p",null,"Cada vez que se crea una intancia de una clase, se llama a su constructor. Los constructores tienen el mismo nombre que la clase y, por lo general, inicializan los atributos/campos del nuevo objeto."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Taxi\n{\n    public bool IsInitialized;\n\n    public Taxi()\n    {\n        IsInitialized = true;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Taxi t = new Taxi();\n        Console.WriteLine(t.IsInitialized);\n    }\n}\n")),(0,r.kt)("p",null,"Un constructor que no toma par\xe1metros se llama ",(0,r.kt)("em",{parentName:"p"},"constructor sin par\xe1metros")," . Los constructores sin par\xe1metros se invocan cada vez que se crea una instancia de un objeto mediante el operador ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," y no se proporcionan argumentos. "),(0,r.kt)("p",null,"A menos que la clase sea est\xe1tica, las clases sin constructores reciben un constructor p\xfablico sin par\xe1metros que crea el  compilador de para habilitar la creaci\xf3n de instancias de la clase."),(0,r.kt)("p",null,"Los constructores se pueden marcar como public , private , protected , internal , protected internal o private protected . Estos modificadores de acceso definen c\xf3mo los usuarios de la clase pueden construir la clase"),(0,r.kt)("p",null,"Una clase puede tener m\xfaltiples constructores que toman diferentes argumentos:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Empleado\n{\n    public int salario;\n\n    public Empleado() { }\n\n    public Empleado(int salarioAnual)\n    {\n        salario = salarioAnual;\n    }\n\n    public Empleado(int salarioSemanal, int cantidadDeSemanas)\n    {\n        salario = salarioSemanal * cantidadDeSemanas;\n    }\n}\n")),(0,r.kt)("p",null,"Esta clase se puede crear usando cualquiera de las siguientes declaraciones:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"Empleado e1 = new Empleado(30000);\nEmpleado e2 = new Empleado(500, 52);\n")),(0,r.kt)("p",null,"Un constructor puede invocar a otro constructor en el mismo objeto usando la palabra reservada ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," . Puede usarse con o sin par\xe1metros, y cualquier par\xe1metro en el constructor est\xe1 disponible como par\xe1metro para ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," o como parte de una expresi\xf3n. Por ejemplo, el segundo constructor del ejemplo anterior se puede reescribir usando this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public Empleado(int salarioSemanal, int cantidadDeSemanas)\n    : this(salarioSemanal * cantidadDeSemanas)\n{\n}\n")),(0,r.kt)("p",null,"El uso de ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," en el ejemplo anterior hace que se llame a este constructor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public Empleado(int salarioAnual)\n{\n    salario = salarioAnual;\n}\n")),(0,r.kt)("h3",{id:"constructores-est\xe1ticos"},"Constructores Est\xe1ticos"),(0,r.kt)("p",null,"Un constructor est\xe1tico se usa para inicializar cualquier campo/atributo est\xe1tico o para realizar una acci\xf3n particular que debe realizarse solo una vez. Se llama autom\xe1ticamente antes de que se cree la primera instancia o se haga referencia a cualquier miembro est\xe1tico. Los constructores est\xe1ticos no tienen par\xe1metros ni modificador de acceso. Si no proporciona un constructor est\xe1tico para inicializar los campos est\xe1ticos, el compilador de C# inicializa los campos est\xe1ticos a su valor predeterminado"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Empleado\n{\n    public static int salarioMinimo;\n\n    static Empleado()\n    {\n        salarioMinimo = 20000;\n    }\n}\n")),(0,r.kt)("p",null,"En este ejemplo, la clase ",(0,r.kt)("inlineCode",{parentName:"p"},"Bus")," tiene un constructor est\xe1tico. Cuando se crea la primera instancia de ",(0,r.kt)("inlineCode",{parentName:"p"},"Bus")," (bus1), se invoca el constructor est\xe1tico para inicializar la clase. La salida de muestra verifica que el constructor est\xe1tico se ejecuta solo una vez, aunque  se crean dos instancias de ",(0,r.kt)("inlineCode",{parentName:"p"},"Bus"),", y que se ejecuta antes de que se ejecute el constructor de instancia."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class Bus\n{\n    // Atributo est\xe1tico utilizada por todas las instancias de Bus.\n     // Representa la hora en que el primer autob\xfas del d\xeda inicia su ruta.\n    public static DateTime horaDeInicio;\n\n    //atributo de instancia\n    public int numeroDeRuta;\n\n    // Constructor est\xe1tico para inicializar la variable est\xe1tica.\n    // Se invoca antes de que se ejecute el constructor de la primera instancia.\n    static Bus()\n    {\n        horaDeInicio = DateTime.Now;\n\n        // La siguiente declaraci\xf3n produce la primera l\xednea de salida,\n        // y la l\xednea aparece solo una vez.\n        Console.WriteLine("El constructor est\xe1tico establece la hora de inicio en {0}",\n            horaDeInicio.ToLongTimeString());\n    }\n\n    // Constructor de instancia.\n    public Bus(int numeroDeRuta)\n    {\n        this.numeroDeRuta = numeroDeRuta;\n        Console.WriteLine("Bus #{0} creado.", numeroDeRuta);\n    }\n\n    // Metodo de instancia.\n    public void Conducir()\n    {\n        TimeSpan tiempoTrascurrido = DateTime.Now - horaDeInicio;\n\n        // Para fines de demostraci\xf3n, tratamos los milisegundos como minutos para simular\n         // tiempos reales de autob\xfas. \xa1No haga esto en su programa!\n        Console.WriteLine("{0} est\xe1 comenzando su ruta {1: N2} minutos despu\xe9s de la hora de inicio {2}.",\n                                this.numeroDeRuta,\n                                tiempoTrascurrido.Milliseconds,\n                                horaDeInicio.ToShortTimeString());\n    }\n}\n\nclass TestBus\n{\n    static void Main()\n    {\n        // La creaci\xf3n de esta instancia activa el constructor est\xe1tico.\n        Bus bus1 = new Bus(71);\n\n        // Crea un segundo autob\xfas.\n        Bus bus2 = new Bus(72);\n\n        \n        bus1.Conducir();\n\n        // Espera 25 milisegundos\n        System.Threading.Thread.Sleep(25);\n\n       \n        bus2.Conducir();\n\n  \n        Console.ReadKey();\n    }\n}\n/* Sample output:\n    El constructor est\xe1tico establece la hora de inicio en 3:57:08 PM.\n    Bus #71 creado.\n    Bus #72 creado.\n    71 est\xe1 comenzando su ruta 6.00 minutos despu\xe9s de la hora de inicio 3:57 PM.\n    72 est\xe1 comenzando su ruta 31.00 minutos despu\xe9s de la hora de inicio 3:57 PM.\n*/\n')))}m.isMDXComponent=!0}}]);