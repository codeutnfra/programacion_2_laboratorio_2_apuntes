"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[1101],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),d=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||r;return n?o.createElement(f,i(i({ref:t},c),{},{components:n})):o.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<r;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5190:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),i=["components"],s={title:"Apuntes - M\xe9todos de extensi\xf3n",sidebar_label:"M\xe9todos de extensi\xf3n",slug:"/clases/otros/apuntes/metodos-extension",hide_table_of_contents:!1,hide_title:!1,author:"Mauricio Cerizza",authorURL:null},l={unversionedId:"clases/otros/Apuntes/metodos-extension",id:"clases/otros/Apuntes/metodos-extension",isDocsHomePage:!1,title:"Apuntes - M\xe9todos de extensi\xf3n",description:"M\xe9todos de extensi\xf3n",source:"@site/docs/clases/21-otros/Apuntes/00-metodos-extension.md",sourceDirName:"clases/21-otros/Apuntes",slug:"/clases/otros/apuntes/metodos-extension",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/otros/apuntes/metodos-extension",version:"current",lastUpdatedBy:"mauriciocerizza",lastUpdatedAt:1634529707,formattedLastUpdatedAt:"10/18/2021",sidebar_label:"M\xe9todos de extensi\xf3n",sidebarPosition:0,frontMatter:{title:"Apuntes - M\xe9todos de extensi\xf3n",sidebar_label:"M\xe9todos de extensi\xf3n",slug:"/clases/otros/apuntes/metodos-extension",hide_table_of_contents:!1,hide_title:!1,author:"Mauricio Cerizza",authorURL:null},sidebar:"Clases",previous:{title:"\xcdndice - M\xe9todos de extensi\xf3n",permalink:"/programacion_2_laboratorio_2_apuntes/docs/otros"},next:{title:"Cuestionario - M\xe9todos de extensi\xf3n",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/otros/apuntes/cuestionario"}},d=[{value:"M\xe9todos de extensi\xf3n",id:"m\xe9todos-de-extensi\xf3n",children:[]}],c={toc:d};function p(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"m\xe9todos-de-extensi\xf3n"},"M\xe9todos de extensi\xf3n"),(0,r.kt)("p",null,"Los ",(0,r.kt)("strong",{parentName:"p"},"m\xe9todos de extensi\xf3n")," permiten agregar nuevos m\xe9todos a tipos de dato existentes. No existe ninguna diferencia entre invocar a un m\xe9todo de extensi\xf3n y llamar a los m\xe9todos realmente definidos en el tipo. "),(0,r.kt)("p",null,"Usar este mecanismo de extensi\xf3n tiene la ventaja de poder agregar funcionalidad a tipos de datos que no podemos modificar, como los que provee la base class library. Adem\xe1s, no requiere modificar la definici\xf3n original ni una relaci\xf3n tan estrecha como la herencia. De todas formas se puede extender cualquier tipo, aunque no sean primitivos ni formen parte de la base class library. "),(0,r.kt)("p",null,"Se deben declarar dentro de una clase est\xe1tica y se definen como m\xe9todos est\xe1ticos, pero se les invoca a partir de una instancia."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static class MiExtension\n{\n    public static int ContarPalabras(this string str)\n    {\n        return str.Split(new char[] { ' ', '.', '?' }, StringSplitOptions.RemoveEmptyEntries).Length;\n    }\n}\n")),(0,r.kt)("p",null,"El c\xf3digo anterior es la declaraci\xf3n del m\xe9todo de extensi\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"ContarPalabras"),", como vemos se declara como un m\xe9todo est\xe1tico dentro de una clase est\xe1tica. "),(0,r.kt)("p",null,"El primer par\xe1metro especif\xedca el tipo que est\xe1 siendo extendido y debe ser precedido por la palabra ",(0,r.kt)("inlineCode",{parentName:"p"},"this"),". En este caso, ",(0,r.kt)("inlineCode",{parentName:"p"},"this string str")," indica que este m\xe9todo extiende al tipo ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),". Cuando el m\xe9todo sea invocado, en el par\xe1metro ",(0,r.kt)("inlineCode",{parentName:"p"},"str")," estar\xe1 cargada la instancia desde la que se llam\xf3 al m\xe9todo. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'string s = "Hola Mundo";\nint i = s.ContarPalabras();\n')),(0,r.kt)("p",null,'Como vemos en el ejemplo anterior, el m\xe9todo de extensi\xf3n se debe llamar desde una instancia del tipo extendido y, en este caso, no recibe argumentos. La instancia con el texto "Hola Mundo" ser\xe1 cargada como argumento en el par\xe1metor ',(0,r.kt)("inlineCode",{parentName:"p"},"str"),". "),(0,r.kt)("p",null,"Si necesitaramos agregar par\xe1metros de entrada al m\xe9todo, podremos hacerlo normalmente seguido del par\xe1metro precedido por ",(0,r.kt)("inlineCode",{parentName:"p"},"this"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static class MiExtension\n{\n    public static int ContarPalabras(this string str, int multiplicador)\n    {\n        int cantidadPalabras = str.Split(new char[] { ' ', '.', '?' }, StringSplitOptions.RemoveEmptyEntries).Length;\n\n        return cantidadPalabras * multiplicador;\n    }\n}\n")),(0,r.kt)("p",null,"En el ejemplo anterior se agrega el par\xe1metro de entrada ",(0,r.kt)("inlineCode",{parentName:"p"},"multiplicador"),". "),(0,r.kt)("p",null,"Veamos c\xf3mo se invoca:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'string s = "Hola Mundo";\nint i = s.ContarPalabras(2);\n')),(0,r.kt)("p",null,"Se provee el argumento para el par\xe1metro de entrada ",(0,r.kt)("inlineCode",{parentName:"p"},"multiplicador"),"."))}p.isMDXComponent=!0}}]);