"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[380],{3905:function(e,n,a){a.d(n,{Zo:function(){return m},kt:function(){return p}});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=t.createContext({}),c=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},m=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=c(a),p=r,g=u["".concat(l,".").concat(p)]||u[p]||d[p]||i;return a?t.createElement(g,s(s({ref:n},m),{},{components:a})):t.createElement(g,s({ref:n},m))}));function p(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=a[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7070:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return m},default:function(){return u}});var t=a(7462),r=a(3366),i=(a(7294),a(3905)),s=["components"],o={title:"Apuntes - Colecciones",sidebar_label:"Matrices",slug:"/clases/colecciones/apuntes/matrices",hide_table_of_contents:!1,hide_title:!1,author:null,authorURL:null},l=void 0,c={unversionedId:"clases/colecciones/Apuntes/matrices",id:"clases/colecciones/Apuntes/matrices",isDocsHomePage:!1,title:"Apuntes - Colecciones",description:"Matrices",source:"@site/docs/clases/06-colecciones/Apuntes/00-matrices.md",sourceDirName:"clases/06-colecciones/Apuntes",slug:"/clases/colecciones/apuntes/matrices",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/colecciones/apuntes/matrices",tags:[],version:"current",lastUpdatedBy:"mauriciocerizza",lastUpdatedAt:1630897767,formattedLastUpdatedAt:"9/6/2021",sidebarPosition:0,frontMatter:{title:"Apuntes - Colecciones",sidebar_label:"Matrices",slug:"/clases/colecciones/apuntes/matrices",hide_table_of_contents:!1,hide_title:!1,author:null,authorURL:null}},m=[{value:"Matrices",id:"matrices",children:[]},{value:"Caracter\xedsticas de las matrices",id:"caracter\xedsticas-de-las-matrices",children:[]},{value:"Matrices Unidimensionales",id:"matrices-unidimensionales",children:[]},{value:"Matrices multidimensionales",id:"matrices-multidimensionales",children:[{value:"Instanciar",id:"instanciar-1",children:[]}]},{value:"Matrices Escalonadas",id:"matrices-escalonadas",children:[]}],d={toc:m};function u(e){var n=e.components,o=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,t.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"matrices"},"Matrices"),(0,i.kt)("p",null,"Las matrices, tambi\xe9n llamadas arrays, arreglos o vectores, son estructuras de datos que nos permiten almacenar m\xfaltiples variables ",(0,i.kt)("strong",{parentName:"p"},"del mismo tipo"),"."),(0,i.kt)("h2",{id:"caracter\xedsticas-de-las-matrices"},"Caracter\xedsticas de las matrices"),(0,i.kt)("h4",{id:"dimensionalidad"},"Dimensionalidad"),(0,i.kt)("p",null,"Las matrices pueden ser ",(0,i.kt)("strong",{parentName:"p"},"unidimensionales"),", ",(0,i.kt)("strong",{parentName:"p"},"bidimensionales")," o ",(0,i.kt)("strong",{parentName:"p"},"multidimensionales"),"."),(0,i.kt)("p",null,"Las matrices unidimensionales tienen una sola dimensi\xf3n. Las matrices que tienen dos o m\xe1s dimensiones son multidimensionales. "),(0,i.kt)("h4",{id:"tama\xf1o-fijo"},"Tama\xf1o fijo"),(0,i.kt)("p",null,"La cantidad y el tama\xf1o de las dimensiones son establecidos al momento de instanciar la matriz ",(0,i.kt)("strong",{parentName:"p"},"y no pueden ser cambiados"),". Si necesitamos alterar el tama\xf1o de un array, tendremos que instanciar uno nuevo con distinta longitud y migrar los datos almacenados en el array original. "),(0,i.kt)("h4",{id:"indexaci\xf3n-base-cero"},"Indexaci\xf3n base-cero"),(0,i.kt)("p",null,"Se puede acceder a los elementos de una matriz a trav\xe9s de un \xedndice num\xe9rico entero. En el caso de las matrices con m\xe1s de una dimensi\xf3n ser\xe1 un sub-\xedndice por dimensi\xf3n, y se acceder\xe1 a un elemento espec\xedfico con una determinada combinaci\xf3n de los distintos sub-\xedndices. "),(0,i.kt)("p",null,"Se dice que las matrices tienen ",(0,i.kt)("strong",{parentName:"p"},"indexaci\xf3n de base-cero (",(0,i.kt)("em",{parentName:"strong"},"zero indexed"),")")," porque sus elementos pueden ser accedidos a trav\xe9s de un \xedndice num\xe9rico que comienza en el n\xfamero cero y se incrementa de uno en uno."),(0,i.kt)("p",null,"Si tenemos un array con tama\xf1o ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"n")),", su primera posici\xf3n se acceder\xe1 con el ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"\xedndice 0"))," y la \xfaltima con el ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"\xedndice n-1"))," (el tama\xf1o menos uno)."),(0,i.kt)("h2",{id:"matrices-unidimensionales"},"Matrices Unidimensionales"),(0,i.kt)("p",null,"Las matrices son objetos cuya instancia debe ser creada. Utilizaremos el operador ",(0,i.kt)("inlineCode",{parentName:"p"},"new")," para crear la instancia especificando el tipo de elemento de la matriz y el n\xfamero de elementos."),(0,i.kt)("h4",{id:"instanciar"},"Instanciar"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[] array = new int[5];\n")),(0,i.kt)("p",null,"En el ejemplo anterior declaramos una matriz de 5 enteros. Los elementos de la matriz se inicializan con el valor predeterminado del tipo de elemento, 0 para enteros. "),(0,i.kt)("p",null,"Pueden almacenar cualquier tipo de elemento que se especifique."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"string[] arrayString = new string[6];\n")),(0,i.kt)("h4",{id:"inicializar"},"Inicializar"),(0,i.kt)("p",null,"Es posible inicializar los elementos de una matriz cuando se declara. En este caso no es necesario especificar la longitud porque se infiere por el n\xfamero de elementos en la lista de inicializaci\xf3n."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[] a = new int[] { 1, 3, 5, 7, 9 };\n")),(0,i.kt)("p",null,"Esta matriz contiene los elementos desde el \xedndice ",(0,i.kt)("inlineCode",{parentName:"p"},"a[0]")," hasta ",(0,i.kt)("inlineCode",{parentName:"p"},"a[4]"),". "),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Matriz unidimensional",src:a(3043).Z})),(0,i.kt)("p",null,"Se puede omitir el operador ",(0,i.kt)("inlineCode",{parentName:"p"},"new")," y el tipo cuando se inicializa una matriz tras la declaraci\xf3n."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[] array2 = { 1, 3, 5, 7, 9 };\n")),(0,i.kt)("h2",{id:"matrices-multidimensionales"},"Matrices multidimensionales"),(0,i.kt)("p",null,"Las matrices pueden tener m\xe1s de una dimensi\xf3n. "),(0,i.kt)("h3",{id:"instanciar-1"},"Instanciar"),(0,i.kt)("p",null,"Creamos una matriz bidimensional de tres filas y cinco columnas."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[,] array = new int[3, 2];\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Matriz multidimensional",src:a(1018).Z})),(0,i.kt)("p",null,"Las matrices tridimensionales son an\xe1logas a un cubo Rubik."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[,,] array1 = new int[4, 2, 3];\n")),(0,i.kt)("h4",{id:"inicializar-1"},"Inicializar"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[,] array2D = new int[,] { { 1, 2 }, { 3, 4 }, { 5, 6 } };\n\n//se accede a los elementos por indice\n\nConsole.WriteLine(array[2, 1]);\n// La salida del ejemplo es:\n// 6\n")),(0,i.kt)("p",null,"Inicializaci\xf3n de una matriz de tres dimensiones:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[,,] array3D = new int[,,] { { { 1, 2, 3 }, { 4, 5, 6 } }, { { 7, 8, 9 }, { 10, 11, 12 } } };\n")),(0,i.kt)("h2",{id:"matrices-escalonadas"},"Matrices Escalonadas"),(0,i.kt)("p",null,"Una ",(0,i.kt)("strong",{parentName:"p"},"matriz escalonada (",(0,i.kt)("em",{parentName:"strong"},"jagged array"),")"),' es una matriz cuyos elementos son matrices, posiblemente de diferentes tama\xf1os. Tambi\xe9n se denomina "matriz de matrices".'),(0,i.kt)("h4",{id:"instanciar-2"},"Instanciar"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[][] jaggedArray = new int[3][];\n")),(0,i.kt)("h4",{id:"inicializar-2"},"Inicializar"),(0,i.kt)("p",null,"Antes de poder usar la matriz escalonada, sus elementos deben inicializarse. Se puede inicializar los elementos de esta manera:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"jaggedArray[0] = new int[5];\njaggedArray[1] = new int[4];\njaggedArray[2] = new int[2];\n")),(0,i.kt)("p",null,"Cada uno de los elementos es una matriz unidimensional de n\xfameros enteros. El primer elemento es una matriz de 5 enteros, el segundo es una matriz de 4 enteros y el tercero es una matriz de 2 enteros."),(0,i.kt)("p",null,"Tambi\xe9n es posible inicializar los elementos de la matriz con valores, en cuyo caso no necesita el tama\xf1o de la matriz. Por ejemplo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"jaggedArray[0] = new int[] { 1, 3, 5, 7, 9 };\njaggedArray[1] = new int[] { 0, 2, 4, 6 };\njaggedArray[2] = new int[] { 11, 22 };\n")),(0,i.kt)("p",null,"Es posible combinar matrices escalonadas y multidimensionales:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'int[][,] jaggedArray = new int[3][,]\n\njaggedArray[0] = new int[] { {1,3}, {5,7} };\njaggedArray[1] = new int[] { {0,2}, {4,6}, {8,10} };\njaggedArray[2] = new int[] { {11,22}, {99,88}, {0,9} };\n\n// Puedemos acceder a elementos individuales\nSystem.Console.Write("{0}", jaggedArray[0][1, 0]);\n\n//La salida de este ejemplo es:\n// 5\n')),(0,i.kt)("p",null,"La propiedad ",(0,i.kt)("inlineCode",{parentName:"p"},"Length")," devuelve el n\xfamero de matrices contenidas en la matriz escalonada. Si tomamos como ejemplo la matriz anterior ",(0,i.kt)("inlineCode",{parentName:"p"},"jaggedArray.Length")," devuelve el valor 3."))}u.isMDXComponent=!0},1018:function(e,n,a){n.Z=a.p+"assets/images/matriz-bidimensional-1e7a1eb1d13bf8a24ec3cbeeafd27a09.png"},3043:function(e,n,a){n.Z=a.p+"assets/images/matriz-unidimensional-ae42f9725a3ab90a583d585e558e997b.png"}}]);