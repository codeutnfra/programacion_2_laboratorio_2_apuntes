"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[5059],{3905:function(e,n,o){o.d(n,{Zo:function(){return p},kt:function(){return m}});var a=o(67294);function t(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function r(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,a)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?r(Object(o),!0).forEach((function(n){t(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,a,t=function(e,n){if(null==e)return{};var o,a,t={},r=Object.keys(e);for(a=0;a<r.length;a++)o=r[a],n.indexOf(o)>=0||(t[o]=e[o]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)o=r[a],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var s=a.createContext({}),u=function(e){var n=a.useContext(s),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},p=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var o=e.components,t=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(o),m=t,v=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return o?a.createElement(v,i(i({ref:n},p),{},{components:o})):a.createElement(v,i({ref:n},p))}));function m(e,n){var o=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=o.length,i=new Array(r);i[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:t,i[1]=l;for(var u=2;u<r;u++)i[u]=o[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,o)}c.displayName="MDXCreateElement"},91625:function(e,n,o){o.r(n),o.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return d}});var a=o(87462),t=o(63366),r=(o(67294),o(3905)),i=["components"],l={title:"Apuntes - Eventos",sidebar_label:"Eventos",slug:"/clases/eventos/apuntes/eventos",hide_table_of_contents:!1,hide_title:!1,author:null,authorURL:null},s=void 0,u={unversionedId:"clases/eventos/Apuntes/eventos",id:"clases/eventos/Apuntes/eventos",title:"Apuntes - Eventos",description:"Eventos",source:"@site/docs/clases/20-eventos/Apuntes/00-eventos.md",sourceDirName:"clases/20-eventos/Apuntes",slug:"/clases/eventos/apuntes/eventos",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/eventos/apuntes/eventos",draft:!1,tags:[],version:"current",lastUpdatedBy:"unknown",lastUpdatedAt:1635801787,formattedLastUpdatedAt:"11/1/2021",sidebarPosition:0,frontMatter:{title:"Apuntes - Eventos",sidebar_label:"Eventos",slug:"/clases/eventos/apuntes/eventos",hide_table_of_contents:!1,hide_title:!1,author:null,authorURL:null},sidebar:"Clases",previous:{title:"\xcdndice",permalink:"/programacion_2_laboratorio_2_apuntes/docs/eventos"},next:{title:"Cuestionario",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/eventos/apuntes/cuestionario"}},p={},d=[{value:"Eventos",id:"eventos",level:2},{value:"Declaraci\xf3n",id:"declaraci\xf3n",level:3},{value:"La Clase EventArgs",id:"la-clase-eventargs",level:4},{value:"Invocaci\xf3n",id:"invocaci\xf3n",level:3},{value:"Suscripci\xf3n al evento",id:"suscripci\xf3n-al-evento",level:3}],c={toc:d};function m(e){var n=e.components,o=(0,t.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"eventos"},"Eventos"),(0,r.kt)("p",null,"Los eventos permiten que una clase u objeto notifique a otras clases u objetos cuando ocurre una acci\xf3n. La acci\xf3n puede ser causada por la interacci\xf3n del usuario, como un clic en un bot\xf3n, o puede resultar de alguna otra l\xf3gica del programa, como el cambio en el estado de un objeto. "),(0,r.kt)("p",null,"El objeto que genera el evento se llama remitente (sender) o emisor del evento. El emisor del evento no sabe qu\xe9 objeto o m\xe9todo recibir\xe1 (manejar\xe1) los eventos que genera. Los objetos que reciben (o manejan ) el evento se llaman suscriptores. Un m\xe9todo que maneja un evento se llama manejador de eventos. Los manejadores de eventos no son m\xe1s que m\xe9todos invocados a trav\xe9s de delegados."),(0,r.kt)("p",null,"El evento suele ser miembro de la clase que lo genera; por ejemplo, el evento ",(0,r.kt)("inlineCode",{parentName:"p"},"Click")," es un miembro de la clase ",(0,r.kt)("inlineCode",{parentName:"p"},"Button"),"."),(0,r.kt)("h3",{id:"declaraci\xf3n"},"Declaraci\xf3n"),(0,r.kt)("p",null,"Los eventos se declaran con la palabra reservada ",(0,r.kt)("inlineCode",{parentName:"p"},"event")," seguido del tipo de delegado para el evento."),(0,r.kt)("p",null,"Supongamos que se desea crear una clase ",(0,r.kt)("inlineCode",{parentName:"p"},"Reloj")," que notifica a los posibles suscriptores cada vez que la hora local cambia su valor en un segundo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"class Reloj \n{\n    public delegate void NotificadorCambioTiempo(object reloj, InfoTiempoEventArgs infoTiempo);\n\n    public event NotificadorCambioTiempo SegundoCambiado;\n\n    public int hora;\n    public int minuto;\n    public int segundo;\n}\n")),(0,r.kt)("p",null,"Los delegados tienen muchos usos en .NET. En el contexto de eventos, un delegado es un intermediario (o mecanismo similar a un puntero) entre la fuente del evento y el c\xf3digo que maneja el evento. Se asocia un delegado con un evento al incluir el tipo de delegado en la declaraci\xf3n del evento, como se muestra en el ejemplo anterior."),(0,r.kt)("p",null,"Por convenci\xf3n, los manejadores de eventos en .NET siempre devuelven ",(0,r.kt)("inlineCode",{parentName:"p"},"void"),' y toman dos par\xe1metros. El primer par\xe1metro es la "fuente" del evento (es decir, el objeto emisor). El segundo par\xe1metro es un objeto derivado de ',(0,r.kt)("inlineCode",{parentName:"p"},"EventArgs"),". Sus m\xe9todos manejadores deber\xe1n seguir este patr\xf3n de dise\xf1o."),(0,r.kt)("h4",{id:"la-clase-eventargs"},"La Clase EventArgs"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"EventArgs")," es la clase base para todos los datos de eventos. La clase ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.eventargs"},"EventArgs")," hereda todos sus m\xe9todos de Object y agrega un campo est\xe1tico p\xfablico llamado ",(0,r.kt)("inlineCode",{parentName:"p"},"Empty"),", que representa un evento sin estado (para permitir el uso eficiente de eventos sin estado). En otras palabras, la clase EventArgs es un dep\xf3sito vac\xedo que se puede usar para proporcionar cualquier informaci\xf3n que desee sobre el evento. Lo que hace la clase suscriptora con esa informaci\xf3n es asunto del suscriptor; no le importa al editor. De esta manera, la clase suscriptora puede hacer coincidir f\xe1cilmente la firma del delegado requerida, simplemente tomando un par\xe1metro de tipo EventArgs. El suscriptor puede usar toda, parte o nada de la informaci\xf3n pasada en EventArgs."),(0,r.kt)("p",null,"El delegado ",(0,r.kt)("inlineCode",{parentName:"p"},"NotificadorCambioTiempo")," encapsular\xe1 cualquier m\xe9todo que devuelve ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," y que tome dos par\xe1metros. El primer par\xe1metro es un objeto que representa el ",(0,r.kt)("inlineCode",{parentName:"p"},"Reloj")," (el objeto que genera el evento), y el segundo par\xe1metro es un objeto de tipo ",(0,r.kt)("inlineCode",{parentName:"p"},"InfoTiempoEventArgs"),", derivado de EventArgs, que contendr\xe1 informaci\xf3n \xfatil para cualquier persona interesada en este evento. El objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"InfoTiempoEventArgs")," tendr\xe1 informaci\xf3n sobre la hora, los minutos y los segundos actuales. Define un constructor y tres variables enteras p\xfablicas."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class InfoTiempoEventArgs : EventArgs\n{\n    public int hora;\n    public int minuto;\n    public int segundo;\n    public InfoTiempoEventArgs(int h, int m, int s)\n    {\n        this.hora = h;\n        this.minuto = m;\n        this.segundo = s;\n    }\n}\n")),(0,r.kt)("h3",{id:"invocaci\xf3n"},"Invocaci\xf3n"),(0,r.kt)("p",null,"Adem\xe1s, la clase ",(0,r.kt)("inlineCode",{parentName:"p"},"Reloj")," tiene un solo m\xe9todo, ",(0,r.kt)("inlineCode",{parentName:"p"},"Ejecutar()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public void Ejecutar( )\n{\n    for (; ; )\n    {\n        // duerme la ejecucion 100 milisengundos\n        Thread.Sleep(100);\n\n        // obtiene hora actual\n        DateTime dt = DateTime.Now;\n        // si los segundos cambian\n        // notifica a los suscriptores\n        if (dt.Second != segundo)\n        {\n            // crea una instancia de InfoTiempoEventArgs\n            // para pasar al suscriptor\n            InfoTiempoEventArgs infoTiempo = new InfoTiempoEventArgs(dt.Hour, dt.Minute, dt.Second);\n\n            // verifico que haya suscriptores al evento\n            if (SegundoCambiado is not null)\n            {\n                SegundoCambiado.Invoke(this, infoTiempo);\n            }\n        }\n\n        // actualizo el estado del objeto Reloj\n        this.segundo = dt.Second;\n        this.minuto = dt.Minute;\n        this.hora = dt.Hour;\n    }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Ejecutar()")," crea un bucle for infinito que comprueba peri\xf3dicamente la hora del sistema. Si la hora ha cambiado con respecto a la hora actual del objeto Reloj, notifica a todos sus suscriptores y luego actualiza su propio estado."),(0,r.kt)("p",null,"El primer paso es dormir le ejecuci\xf3n durante 100 milisegundos:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"Thread.Sleep(100);\n")),(0,r.kt)("p",null,"Despu\xe9s de dormir durante 100 milisegundos, el m\xe9todo verifica la hora actual:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"DateTime dt = DateTime.Now;\n")),(0,r.kt)("p",null,"Cuando se detecta que el segundo se ha incrementado, el m\xe9todo debe notificar a sus suscriptores. Para hacerlo, primero crea un nuevo objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"InfoTiempoEventArgs"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"if (dt.Second != segundo)\n{\n    InfoTiempoEventArgs infoTiempo = new InfoTiempoEventArgs(dt.Hour, dt.Minute, dt.Second);\n    //...\n}\n")),(0,r.kt)("p",null,"Luego notifica a los suscriptores disparando el evento ",(0,r.kt)("inlineCode",{parentName:"p"},"SegundoCambiado"),". "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"if (SegundoCambiado is not null)\n{\n    SegundoCambiado.Invoke(this, infoTiempo);\n}\n")),(0,r.kt)("p",null,"Si un evento no tiene suscriptores registrados, ser\xe1 ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),". El codigo anterior verifica que el valor no sea nulo, lo que garantiza que haya suscriptores antes de llamar a ",(0,r.kt)("inlineCode",{parentName:"p"},"SegundoCambiado"),"."),(0,r.kt)("p",null,"El evento ",(0,r.kt)("inlineCode",{parentName:"p"},"SegundoCambiado")," toma dos argumentos: la fuente del evento y el objeto derivado de EventArgs. Cuando se invoca, se pasa la intancia de Reloj porque es la fuente del evento. El segundo par\xe1metro es el objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"InfoTiempoEventArgs"),"."),(0,r.kt)("p",null,"Al generar el evento, se invocar\xe1n los m\xe9todos que se suscripto al evento; Una vez que se genera el evento, actualiza el estado de la clase Reloj:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"this.segundo = dt.Second;\nthis.minuto = dt.Minute;\nthis.hora = dt.Hour;\n")),(0,r.kt)("h3",{id:"suscripci\xf3n-al-evento"},"Suscripci\xf3n al evento"),(0,r.kt)("p",null,"Todo lo que queda es crear clases que puedan suscribirse a este evento. El formulario ",(0,r.kt)("inlineCode",{parentName:"p"},"FrmPrincipal")," contiene un label ",(0,r.kt)("inlineCode",{parentName:"p"},"lblTiempo")," que muestra la hora actual."),(0,r.kt)("p",null,"En en m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"FrmPrincipal_Load")," se crea una instacia de ",(0,r.kt)("inlineCode",{parentName:"p"},"Reloj")," que se una para suscribirse al evento ",(0,r.kt)("inlineCode",{parentName:"p"},"SegundoCambiado"),"  y llamar al m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"Ejecutar()"),". De esta manera cada vez que se genera el evento ser\xe1 manejado por el m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"MostrarCambioTiempo")," que actualiza la propiedad ",(0,r.kt)("inlineCode",{parentName:"p"},"Text")," de ",(0,r.kt)("inlineCode",{parentName:"p"},"lblTiempo"),".   "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public partial class FrmPrincipal : Form\n{\n    private void FrmPrincipal_Load(object sender, EventArgs e)\n    {\n        Reloj  reloj = new Reloj();\n        reloj.SegundoCambiado += MostrarCambioTiempo;\n        reloj.Ejecutar();\n    }\n\n    public void MostrarCambioTiempo(object reloj, InfoTiempoEventArgs info)\n    {\n        lblTiempo.Text = $"{info.hora}{info.minuto}{info.segundo}";\n    }\n}\n')),(0,r.kt)("p",null,"Cuando se invoca el m\xe9todo, ",(0,r.kt)("inlineCode",{parentName:"p"},"FrmPrincipal_Load"),", se asocia el evento de la clase Reloj con el m\xe9todo manejador."),(0,r.kt)("p",null,"El operador ",(0,r.kt)("inlineCode",{parentName:"p"},"+=")," es el mecanismo mediante el cual las clases pueden asociar sus manejadores de eventos con el evento. El uso del operador ",(0,r.kt)("inlineCode",{parentName:"p"},"+=")," permite que varias clases registren manejadores para un solo evento. El operador ",(0,r.kt)("inlineCode",{parentName:"p"},"-=")," permite desasociar el manejador al evento."),(0,r.kt)("p",null,"La firma del m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"MostrarCambioTiempo")," que maneja el evento tiene que coincidir con la firma del delegado ",(0,r.kt)("inlineCode",{parentName:"p"},"NotificadorCambioTiempo"),", que recibe como primer par\xe1metro object y como segundo par\xe1metro el objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"InfoTiempoEventArgs"),"."))}m.isMDXComponent=!0}}]);