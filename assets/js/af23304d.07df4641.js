"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[1866],{3905:function(e,a,n){n.d(a,{Zo:function(){return c},kt:function(){return m}});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),d=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},c=function(e){var a=d(e.components);return t.createElement(s.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,k=u["".concat(s,".").concat(m)]||u[m]||p[m]||l;return n?t.createElement(k,i(i({ref:a},c),{},{components:n})):t.createElement(k,i({ref:a},c))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4782:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return d},default:function(){return p}});var t=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],o={sidebar_label:"Implementando herencia en C#",slug:"/clases/herencia/apuntes/herencia-csharp",hide_table_of_contents:!1,hide_title:!0,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},s={unversionedId:"clases/herencia/Apuntes/herencia-csharp",id:"clases/herencia/Apuntes/herencia-csharp",isDocsHomePage:!1,title:"herencia-csharp",description:"Implementando herencia en C#",source:"@site/docs/clases/08-herencia/Apuntes/01-herencia-csharp.md",sourceDirName:"clases/08-herencia/Apuntes",slug:"/clases/herencia/apuntes/herencia-csharp",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/herencia/apuntes/herencia-csharp",version:"current",lastUpdatedBy:"mauriciocerizza",lastUpdatedAt:1632109048,formattedLastUpdatedAt:"9/20/2021",sidebar_label:"Implementando herencia en C#",sidebarPosition:1,frontMatter:{sidebar_label:"Implementando herencia en C#",slug:"/clases/herencia/apuntes/herencia-csharp",hide_table_of_contents:!1,hide_title:!0,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},sidebar:"Clases",previous:{title:"Apuntes - Herencia",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/herencia/apuntes/herencia"},next:{title:"clases-selladas",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/herencia/apuntes/clases-selladas"}},d=[{value:"Implementando herencia en C#",id:"implementando-herencia-en-c",children:[{value:"\xbfQu\xe9 se hereda y qu\xe9 no?",id:"qu\xe9-se-hereda-y-qu\xe9-no",children:[]}]},{value:"Modificador protected",id:"modificador-protected",children:[]},{value:"Constructores y herencia",id:"constructores-y-herencia",children:[]}],c={toc:d};function p(e){var a=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"implementando-herencia-en-c"},"Implementando herencia en C#"),(0,l.kt)("p",null,"La herencia en C# es h\xedbrida y soporta los tipos de herencia simple, multi-nivel y jer\xe1rquica. No admite herencia m\xfaltiple, es decir que cada clase podr\xe1 heredar de solo una clase base. "),(0,l.kt)("p",null,"Para indicar que una clase hereda de otra lo \xfanico que tenemos que hacer es, seguido del nombre de la clase derivada, indicar el nombre de la clase base precedido por el s\xedmbolo ",(0,l.kt)("inlineCode",{parentName:"p"},":"),"."),(0,l.kt)("p",null,"En el siguiente ejemplo, la clase ",(0,l.kt)("inlineCode",{parentName:"p"},"Estudiante")," hereda de ",(0,l.kt)("inlineCode",{parentName:"p"},"Persona")," y agrega los atributos ",(0,l.kt)("inlineCode",{parentName:"p"},"legajo")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"materias")," y el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"Estudiar"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'public class Estudiante : Persona\n{\n    private int legajo;\n    private List<string> materias;\n\n    public string Estudiar() \n    {   \n        return "Estudiando...";\n    }\n}\n')),(0,l.kt)("h3",{id:"qu\xe9-se-hereda-y-qu\xe9-no"},"\xbfQu\xe9 se hereda y qu\xe9 no?"),(0,l.kt)("p",null,"Las clases derivadas heredan todos los miembros de la clase base, salvo los constructores. Eso incluye miembros privados, los cuales se heredan pero no son accesibles desde la clase derivada. Pensemos que la clase derivada incluye los atributos y m\xe9todos de la clase base, por lo tanto tambi\xe9n los est\xe1 herendando, incluso si no los puede ver existen en memoria.  "),(0,l.kt)("h2",{id:"modificador-protected"},"Modificador protected"),(0,l.kt)("p",null,"Al definir atributos con el modificador de visibilidad ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"protected"))," haremos que este sea accesible s\xf3lo dentro de la relaci\xf3n de herencia. Por lo que para una clase derivada el modificador ",(0,l.kt)("inlineCode",{parentName:"p"},"protected")," es equivalente a ",(0,l.kt)("inlineCode",{parentName:"p"},"public"),", pero para una clase ajena a la relaci\xf3n este modificador es igual a ",(0,l.kt)("inlineCode",{parentName:"p"},"private"),". "),(0,l.kt)("p",null,"Existen algunas variantes de este modificador. El modificador ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"private protected"))," hace que el miembro s\xf3lo sea accesible por clases derivadas en el mismo ensamblado (en el mismo proyecto). El modificador ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"protected internal"))," hace que el miembro s\xf3lo sea accesible desde el ensamblado donde se encuentra declarada la clase o por tipos derivados en cualquier ensamblado. "),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Desde donde se llama"),(0,l.kt)("th",{parentName:"tr",align:null},"public"),(0,l.kt)("th",{parentName:"tr",align:null},"protected"),(0,l.kt)("th",{parentName:"tr",align:null},"internal"),(0,l.kt)("th",{parentName:"tr",align:null},"protected internal"),(0,l.kt)("th",{parentName:"tr",align:null},"private protected"),(0,l.kt)("th",{parentName:"tr",align:null},"private"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Dentro de la clase"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Clase derivada (mismo proyecto)"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Clase no derivada (mismo proyecto)"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Clase derivada (proyecto diferente)"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Clase no derivada (proyecto diferente)"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c")))),(0,l.kt)("h2",{id:"constructores-y-herencia"},"Constructores y herencia"),(0,l.kt)("p",null,"Si la clase base no tiene un constructor p\xfablico y sin par\xe1metros, entonces tendremos que realizar una llamada expl\xedcita a un constructor de la clase base desde la derivada. Recordemos que los constructores no se heredan. Cuando generemos una instancia del sub-tipo s\xf3lo podremos trabajar con los constructores declarados en dicha clase, sin embargo los atributos de la clase base s\xed se heredan y deber\xe1n ser inicializados."),(0,l.kt)("p",null,"Para hacer esto utilizaremos el operador ",(0,l.kt)("inlineCode",{parentName:"p"},":base()")," a continuaci\xf3n de la firma del constructor. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'public class Persona\n{\n    private string nombre;\n    private string dni;\n\n    public Persona(string nombre, string dni)\n    {\n        this.nombre = nombre;\n        this.dni = dni;\n    }\n}\n\npublic class Estudiante : Persona\n{\n    private int legajo;\n\n    public Estudiante(string nombreEstudiante, string dni, int legajo) : base(nombreEstudiante, dni)\n    {\n        this.legajo = legajo;\n    }\n}\n\npublic class Program\n{    \n    static void Main(string[] args)\n    {\n        Estudiante estudiante = new Estudiante("Juan Pablo", "11222233", 9999);\n    }\n}\n')),(0,l.kt)("p",null,"En el ejemplo anterior ",(0,l.kt)("inlineCode",{parentName:"p"},"Estudiante")," hereda ",(0,l.kt)("inlineCode",{parentName:"p"},"nombre")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"dni")," de la clase ",(0,l.kt)("inlineCode",{parentName:"p"},"Persona")," pero no los puede acceder. Debe llamar al constructor de la clase base para que inicialice esos atributos. Para esto utiliza el operador ",(0,l.kt)("inlineCode",{parentName:"p"},":base()")," al que le pasa, en el mismo orden de los par\xe1metros de entrada del constructor base, los valores que recibi\xf3 como argumento el constructor de la derivada. "),(0,l.kt)("p",null,"Veamos paso a paso c\xf3mo se ejecuta el c\xf3digo anterior:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"La ejecuci\xf3n empieza en el entry point (m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"li"},"Main"),") y procesa la sentencia que instancia un nuevo estudiante. "),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},'new Estudiante("Juan Pablo", "11222233", 9999)')," invoca al constructor de la clase ",(0,l.kt)("inlineCode",{parentName:"li"},"Estudiante")," inyectando los valores en el mismo orden, primero el nombre, luego el dni y por \xfaltimo el legajo. "),(0,l.kt)("li",{parentName:"ol"},"El constructor de ",(0,l.kt)("inlineCode",{parentName:"li"},"Estudiante")," pasa los valores que recibi\xf3 en los par\xe1metros ",(0,l.kt)("inlineCode",{parentName:"li"},"nombreEstudiante")," y ",(0,l.kt)("inlineCode",{parentName:"li"},"dni")," al constructor de ",(0,l.kt)("inlineCode",{parentName:"li"},"Persona"),". Para esto utiliza el operador ",(0,l.kt)("inlineCode",{parentName:"li"},":base()"),"."),(0,l.kt)("li",{parentName:"ol"},"Se ejecuta el constructor de ",(0,l.kt)("inlineCode",{parentName:"li"},"Persona")," inicializando los atributos ",(0,l.kt)("inlineCode",{parentName:"li"},"nombre")," y ",(0,l.kt)("inlineCode",{parentName:"li"},"dni"),"."),(0,l.kt)("li",{parentName:"ol"},"Luego, la ejecuci\xf3n regresa al constructor de ",(0,l.kt)("inlineCode",{parentName:"li"},"Estudiante")," que inicializa el atributo ",(0,l.kt)("inlineCode",{parentName:"li"},"legajo")," de dicha clase. "),(0,l.kt)("li",{parentName:"ol"},"Por \xfaltimo, se regresa al m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"li"},"Main")," y se almacena la referencia del objeto que se acaba de instanciar en la variable ",(0,l.kt)("inlineCode",{parentName:"li"},"estudiante"),".")))}p.isMDXComponent=!0}}]);