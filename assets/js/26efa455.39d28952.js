"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[8196],{3905:function(e,n,o){o.d(n,{Zo:function(){return d},kt:function(){return m}});var a=o(7294);function t(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function r(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,a)}return o}function s(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?r(Object(o),!0).forEach((function(n){t(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function i(e,n){if(null==e)return{};var o,a,t=function(e,n){if(null==e)return{};var o,a,t={},r=Object.keys(e);for(a=0;a<r.length;a++)o=r[a],n.indexOf(o)>=0||(t[o]=e[o]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)o=r[a],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var l=a.createContext({}),c=function(e){var n=a.useContext(l),o=n;return e&&(o="function"==typeof e?e(n):s(s({},n),e)),o},d=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var o=e.components,t=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(o),m=t,b=u["".concat(l,".").concat(m)]||u[m]||p[m]||r;return o?a.createElement(b,s(s({ref:n},d),{},{components:o})):a.createElement(b,s({ref:n},d))}));function m(e,n){var o=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=o.length,s=new Array(r);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:t,s[1]=i;for(var c=2;c<r;c++)s[c]=o[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,o)}u.displayName="MDXCreateElement"},3754:function(e,n,o){o.r(n),o.d(n,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return p}});var a=o(7462),t=o(3366),r=(o(7294),o(3905)),s=["components"],i={sidebar_label:"Objetos",slug:"/clases/objetos/apuntes/objetos",hide_table_of_contents:!1,hide_title:!0,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},l=void 0,c={unversionedId:"clases/objetos/Apuntes/objetos",id:"clases/objetos/Apuntes/objetos",title:"objetos",description:"Objetos",source:"@site/docs/clases/03-objetos/Apuntes/03-objetos.md",sourceDirName:"clases/03-objetos/Apuntes",slug:"/clases/objetos/apuntes/objetos",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/objetos/apuntes/objetos",draft:!1,tags:[],version:"current",lastUpdatedBy:"unknown",lastUpdatedAt:1656294528,formattedLastUpdatedAt:"6/26/2022",sidebarPosition:3,frontMatter:{sidebar_label:"Objetos",slug:"/clases/objetos/apuntes/objetos",hide_table_of_contents:!1,hide_title:!0,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},sidebar:"Clases",previous:{title:"Clases",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/objetos/apuntes/clases"},next:{title:"Constructores",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/objetos/apuntes/constructores"}},d={},p=[{value:"Objetos",id:"objetos",level:2},{value:"Instancias de una clase",id:"instancias-de-una-clase",level:3},{value:"Identidad de un objeto",id:"identidad-de-un-objeto",level:3}],u={toc:p};function m(e){var n=e.components,o=(0,t.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"objetos"},"Objetos"),(0,r.kt)("p",null,"Una clase es como un molde que especifica lo que puede hacer ese tipo. Un objeto es b\xe1sicamente un bloque de memoria que se ha asignado y configurado de acuerdo con el molde. Un programa puede crear muchos objetos de la misma clase. Los objetos tambi\xe9n se denominan instancias y se pueden almacenar en una variable con nombre o en una matriz o colecci\xf3n. Se utilizan estas variables para llamar a los m\xe9todos y acceder a las propiedades p\xfablicas del objeto. En un lenguaje orientado a objetos como C#, un programa t\xedpico consta de varios objetos que interact\xfaan din\xe1micamente."),(0,r.kt)("h3",{id:"instancias-de-una-clase"},"Instancias de una clase"),(0,r.kt)("p",null,"Las instancias de las clases se crean utilizando el operador ",(0,r.kt)("inlineCode",{parentName:"p"},"new"),". En el ejemplo siguiente, ",(0,r.kt)("inlineCode",{parentName:"p"},"Persona")," es el tipo y ",(0,r.kt)("inlineCode",{parentName:"p"},"persona1")," y ",(0,r.kt)("inlineCode",{parentName:"p"},"persona2")," son instancias u objetos de ese tipo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class Persona\n{\n    public string nombre;\n    public int edad;\n\n    public Persona(string nombre, int edad)\n    {\n        this.nombre = nombre;\n        this.edad = edad;\n    }\n    // Otras propiedadse, metodos...\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Persona persona1 = new Persona("Leopold", 6);\n        Console.WriteLine("persona1 Nombre = {0} Edad = {1}", persona1.nombre, persona1.edad);\n\n        // Declaro nueva persona, asigno persona1 .\n        Persona persona2 = persona1;\n\n        // Modifico nomebre y edad de persona2, y persona1 tambi\xe9n es modificada.\n        persona2.nombre = "Molly";\n        persona2.edad = 16;\n\n        Console.WriteLine("persona2 Nombre = {0} Edad = {1}", persona2.nombre, persona2.edad);\n        Console.WriteLine("persona1 Nombre = {0} Edad = {1}", persona1.nombre, persona1.edad);\n    }\n}\n/*\n    Output:\n    persona1 Nombre = Leopold Edad = 6\n    persona2 Nombre = Molly Edad = 16\n    persona1 Nombre = Molly Edad = 16\n*/\n')),(0,r.kt)("h3",{id:"identidad-de-un-objeto"},"Identidad de un objeto"),(0,r.kt)("p",null,"Cuando comparamos la igualdad de dos objetos, primero debemos distinguir si se desea saber si las dos variables representan el mismo objeto en la memoria o si los valores de uno o m\xe1s de sus campos son equivalentes. "),(0,r.kt)("p",null,"Para determinar si dos instancias de clase se refieren a la misma ubicaci\xf3n en la memoria (lo que significa que tienen la misma identidad), use el m\xe9todo est\xe1tico ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.Equals")," o ",(0,r.kt)("inlineCode",{parentName:"p"},"ReferenceEquals"),". ( ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," es la clase base impl\xedcita para todos los tipos de valor y tipos de referencia)."),(0,r.kt)("p",null,"Para determinar si los valores de los campos en dos instancias de clase son iguales, puede usar el m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"Equals")," o el operador ",(0,r.kt)("inlineCode",{parentName:"p"},"=="),'. Sin embargo, solo \xfaselos si la clase los ha anulado o sobrecargado para proporcionar una definici\xf3n personalizada de lo que significa "igualdad" para objetos de ese tipo. ',(0,r.kt)("em",{parentName:"p"},"Veremos como hacerlo en las proximas clases"),"."))}m.isMDXComponent=!0}}]);