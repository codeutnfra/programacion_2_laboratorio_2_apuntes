"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[3017],{3905:function(e,a,n){n.d(a,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,r,o=function(e,a){if(null==e)return{};var n,r,o={},t=Object.keys(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var a=r.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},d=function(e){var a=c(e.components);return r.createElement(s.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},p=r.forwardRef((function(e,a){var n=e.components,o=e.mdxType,t=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,b=p["".concat(s,".").concat(m)]||p[m]||u[m]||t;return n?r.createElement(b,i(i({ref:a},d),{},{components:n})):r.createElement(b,i({ref:a},d))}));function m(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var t=n.length,i=new Array(t);i[0]=p;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<t;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9119:function(e,a,n){n.r(a),n.d(a,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=n(7462),o=n(3366),t=(n(7294),n(3905)),i=["components"],l={title:"Gu\xeda de estilos",sidebar_label:"Gu\xeda de estilos",sidebar_position:8,slug:"/introduccion/guia-estilos",hide_table_of_contents:!0},s=void 0,c={unversionedId:"introduccion/guia-estilos",id:"introduccion/guia-estilos",title:"Gu\xeda de estilos",description:"Las gu\xedas de estilo (tambi\xe9n llamadas est\xe1ndares de c\xf3digo o estilos de programaci\xf3n) es el nombre que se le da al conjunto de normas usadas para escribir c\xf3digo, estas son regularmente dependientes del lenguaje de programaci\xf3n.",source:"@site/docs/introduccion/guia-estilos.md",sourceDirName:"introduccion",slug:"/introduccion/guia-estilos",permalink:"/programacion_2_laboratorio_2_apuntes/docs/introduccion/guia-estilos",draft:!1,tags:[],version:"current",lastUpdatedBy:"unknown",lastUpdatedAt:1656290641,formattedLastUpdatedAt:"6/26/2022",sidebarPosition:8,frontMatter:{title:"Gu\xeda de estilos",sidebar_label:"Gu\xeda de estilos",sidebar_position:8,slug:"/introduccion/guia-estilos",hide_table_of_contents:!0},sidebar:"Introduccion",previous:{title:"Instalaci\xf3n del entorno de base de datos",permalink:"/programacion_2_laboratorio_2_apuntes/docs/introduccion/sql-server"},next:{title:"Recomendaciones",permalink:"/programacion_2_laboratorio_2_apuntes/docs/introduccion/recomendaciones"}},d={},u=[{value:"Identificadores",id:"identificadores",level:2},{value:"Es preferible la legibilidad a la brevedad",id:"es-preferible-la-legibilidad-a-la-brevedad",level:3},{value:"Graf\xeda",id:"graf\xeda",level:2},{value:"PascalCase",id:"pascalcase",level:3},{value:"CamelCase",id:"camelcase",level:3},{value:"Comentarios",id:"comentarios",level:2},{value:"C\xf3digo Limpio",id:"c\xf3digo-limpio",level:2},{value:"Los nombres importan",id:"los-nombres-importan",level:3},{value:"Evitar identificadores de una letra",id:"evitar-identificadores-de-una-letra",level:4},{value:"Hacer una cosa",id:"hacer-una-cosa",level:3},{value:"La regla del Boy Scout",id:"la-regla-del-boy-scout",level:3},{value:"DRY (Don\xb4t repeat yourself)",id:"dry-dont-repeat-yourself",level:3},{value:"Los comentarios mienten",id:"los-comentarios-mienten",level:3}],p={toc:u};function m(e){var a=e.components,n=(0,o.Z)(e,i);return(0,t.kt)("wrapper",(0,r.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Las gu\xedas de estilo (tambi\xe9n llamadas est\xe1ndares de c\xf3digo o estilos de programaci\xf3n) es el nombre que se le da al conjunto de normas usadas para escribir c\xf3digo, estas son regularmente dependientes del lenguaje de programaci\xf3n. "),(0,t.kt)("p",null,"Es importante escribir c\xf3digo que sea f\xe1cil de mantener, un buen estilo para programar debe tener una estructura de c\xf3digo f\xe1cil de entender no solo para quien lo programa sino tambi\xe9n para otros programadores y aportar eficiencia al proceso de desarrollo, logrando que los programas sean m\xe1s robustos y comprensibles."),(0,t.kt)("h2",{id:"identificadores"},"Identificadores"),(0,t.kt)("p",null,"Un identificador es el nombre que se asigna a un tipo (clase, interfaz, estructura, registro, delegado o enumeraci\xf3n), miembro, variable o espacio de nombres."),(0,t.kt)("p",null,"Los nombres de indentificadores deben ser descriptivos. "),(0,t.kt)("h3",{id:"es-preferible-la-legibilidad-a-la-brevedad"},"Es preferible la legibilidad a la brevedad"),(0,t.kt)("p",null,"Elija nombre facilmente legibles. En general, no deber\xeda utilizar abreviaturas ni acr\xf3nimos. Estos elementos hacen\nque los nombres sean menos legibles. De igual forma, es dif\xedcil saber cu\xe1ndo es\nseguro suponer que un acr\xf3nimo es ampliamente reconocido. "),(0,t.kt)("p",null,"Por ejemplo en lugar de declarar una variable que contendra un numero aleatorio como:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"}," int numAleat;\n")),(0,t.kt)("p",null,"es preferible:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"}," int numeroAleatorio;\n")),(0,t.kt)("p",null,"\xf3:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"}," int numeroRandom;\n")),(0,t.kt)("p",null,"No utilice guiones de subrayado, guiones ni ning\xfan otro car\xe1cter no alfanum\xe9rico. Evite utilizar identificadores que est\xe1n en conflicto con palabras clave de lenguajes\nde programaci\xf3n ampliamente utilizados. Aunque los lenguajes conformes a CLS\ndeben proporcionar una manera de utilizar palabras clave como palabras normales,\nlos procedimientos recomendados indican que no deber\xeda obligar a los\ndesarrolladores a saber c\xf3mo hacerlo.  "),(0,t.kt)("h2",{id:"graf\xeda"},"Graf\xeda"),(0,t.kt)("h3",{id:"pascalcase"},"PascalCase"),(0,t.kt)("p",null,"La notaci\xf3n Pascal Case combina las palabras estableciendo que la primera letra de cada palabra est\xe9 en may\xfascula sin excepciones, y el resto de letras en min\xfasculas ",(0,t.kt)("inlineCode",{parentName:"p"},"ContarPalabras"),"."),(0,t.kt)("p",null,"Utilizamos PascalCase para: clases, enumerados, m\xe9todos, eventos, namespaces, propiedades e interfaces."),(0,t.kt)("p",null,"Al nombrar una interface anteponer el nombre con un I. Esto indica claramente a los usuarios del c\xf3digo que es un interface."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public interface IWorkerQueue\n{\n}\n")),(0,t.kt)("h3",{id:"camelcase"},"CamelCase"),(0,t.kt)("p",null,"La notaci\xf3n Camel Case combina las palabras estableciendo que la primera letra de cada palabra est\xe9 en may\xfascula a excepci\xf3n de la primera palabra, y el resto de letras en min\xfasculas.\nUtilizamos camelCase para: par\xe1metros, variables locales y atributos."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"  int notaPrimerParcial;\n")),(0,t.kt)("h2",{id:"comentarios"},"Comentarios"),(0,t.kt)("p",null,"Utilizar la documentaci\xf3n de m\xe9todos. Colocando sobre la firma de un m\xe9todo /// se\nautocompletar\xe1 el bloque de documentaci\xf3n:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},'/// <summary> \n/// Descripci\xf3n del m\xe9todo \n/// </summary> \n/// <param name="dato">Informaci\xf3n sobre el par\xe1metro</param> \n/// <returns>Informaci\xf3n sobre el retorno del m\xe9todo</returns> \nprivate static int Metodo(string dato)\n{\n    // ...\n}\n')),(0,t.kt)("h2",{id:"c\xf3digo-limpio"},"C\xf3digo Limpio"),(0,t.kt)("p",null,(0,t.kt)("em",{parentName:"p"},"Clean Code")," es el t\xedtulo de un libro escrito por Robert C. Martin (Uncle Bob) donde nos habla de c\xf3mo escribir \xabc\xf3digo limpio\xbb, ese c\xf3digo bien estructurado, f\xe1cil de comprender, robusto y, a su vez f\xe1cil de mantener. En esta secci\xf3n tomaremos algunos principios de Clean Code."),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"El c\xf3digo limpio se lee como prosa bien escrita. -\nRobert Martin.")),(0,t.kt)("h3",{id:"los-nombres-importan"},"Los nombres importan"),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"El nombre de una variable, funci\xf3n o clase debe indicar por qu\xe9 existe, qu\xe9 hace y c\xf3mo se usa. Si el nombre requiere un comentario, significa que el nombre no cumple su cometido. -\nRobert Martin")),(0,t.kt)("p",null,"Deben ser preciso y entregar la idea central."),(0,t.kt)("h4",{id:"evitar-identificadores-de-una-letra"},"Evitar identificadores de una letra"),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"Los contadores de bucle est\xe1n bautizados como i, j o k, pero nunca con otra variable de una sola letra. Recordar que r es la versi\xf3n en min\xfascula de una URL sin el host y el sistema\u2026 es algo que podr\xedas recordar el primer d\xeda, pero seguro que al d\xeda siguiente tendr\xedas que volver a mirar el c\xf3digo para averiguar que es. -\nRobert Martin")),(0,t.kt)("h3",{id:"hacer-una-cosa"},"Hacer una cosa"),(0,t.kt)("p",null,"Los m\xe9todos deben hacer. Deben hacerlo bien y debe ser lo unico que hagan.\nDeben ser de un tama\xf1o reducido con pocos niveles de anidamiento. Si un m\xe9todo tiene muchas lineas probablemente necesite divir el m\xe9todo en varios procedimientos. Los m\xe9todos deben ser simples, claros y peque\xf1os."),(0,t.kt)("h3",{id:"la-regla-del-boy-scout"},"La regla del Boy Scout"),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"Dejar el campamento m\xe1s limpio de lo que se ha encontrado.")),(0,t.kt)("p",null,"Dejar el c\xf3digo mejor de lo que lo encontraste."),(0,t.kt)("h3",{id:"dry-dont-repeat-yourself"},"DRY (Don\xb4t repeat yourself)"),(0,t.kt)("p",null,"No deben existir dos partes del programa que realicen la misma funci\xf3n"),(0,t.kt)("h3",{id:"los-comentarios-mienten"},"Los comentarios mienten"),(0,t.kt)("p",null,"A menudo el c\xf3digo es modificado, los comentarios no. Los comentarios deben acompa\xf1ar las modificaciones en el c\xf3digo."))}m.isMDXComponent=!0}}]);