"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[9635],{3905:function(e,a,n){n.d(a,{Zo:function(){return d},kt:function(){return m}});var i=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,i)}return n}function t(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,i,r=function(e,a){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var a=i.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):t(t({},a),e)),n},d=function(e){var a=c(e.components);return i.createElement(l.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},u=i.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?i.createElement(h,t(t({ref:a},d),{},{components:n})):i.createElement(h,t({ref:a},d))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,t=new Array(o);t[0]=u;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,t[1]=s;for(var c=2;c<o;c++)t[c]=n[c];return i.createElement.apply(null,t)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2578:function(e,a,n){n.r(a),n.d(a,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var i=n(7462),r=n(3366),o=(n(7294),n(3905)),t=["components"],s={title:"Apuntes - Herencia",sidebar_label:"Herencia",slug:"/clases/herencia/apuntes/herencia",hide_table_of_contents:!1,hide_title:!1,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},l=void 0,c={unversionedId:"clases/herencia/Apuntes/herencia",id:"clases/herencia/Apuntes/herencia",title:"Apuntes - Herencia",description:"Herencia",source:"@site/docs/clases/08-herencia/Apuntes/00-herencia.md",sourceDirName:"clases/08-herencia/Apuntes",slug:"/clases/herencia/apuntes/herencia",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/herencia/apuntes/herencia",draft:!1,tags:[],version:"current",lastUpdatedBy:"mauriciocerizza",lastUpdatedAt:1632109048,formattedLastUpdatedAt:"9/20/2021",sidebarPosition:0,frontMatter:{title:"Apuntes - Herencia",sidebar_label:"Herencia",slug:"/clases/herencia/apuntes/herencia",hide_table_of_contents:!1,hide_title:!1,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},sidebar:"Clases",previous:{title:"\xcdndice",permalink:"/programacion_2_laboratorio_2_apuntes/docs/herencia"},next:{title:"Implementando herencia en C#",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/herencia/apuntes/herencia-csharp"}},d={},p=[{value:"Herencia",id:"herencia",level:2},{value:"Tipos de herencia",id:"tipos-de-herencia",level:2},{value:"Herencia simple",id:"herencia-simple",level:4},{value:"Herencia m\xfaltiple",id:"herencia-m\xfaltiple",level:4},{value:"Herencia multi-nivel",id:"herencia-multi-nivel",level:4},{value:"Herencia jer\xe1rquica",id:"herencia-jer\xe1rquica",level:4},{value:"Herencia h\xedbrida",id:"herencia-h\xedbrida",level:4},{value:"S.O.L.I.D: Principio de sustituci\xf3n de Liskov",id:"solid-principio-de-sustituci\xf3n-de-liskov",level:2},{value:"Beneficios de aplicar herencia",id:"beneficios-de-aplicar-herencia",level:2},{value:"Riesgos de aplicar herencia",id:"riesgos-de-aplicar-herencia",level:2},{value:"Herencia y composici\xf3n",id:"herencia-y-composici\xf3n",level:2}],u={toc:p};function m(e){var a=e.components,s=(0,r.Z)(e,t);return(0,o.kt)("wrapper",(0,i.Z)({},u,s,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"herencia"},"Herencia"),(0,o.kt)("p",null,"En el desarrollo de software encontraremos con frecuencia objetos que se parecen mucho a otros objetos, salvo por algunas diferencias puntuales. Por ejemplo, en un sistema de liquidaci\xf3n de sueldos podemos tener empleados full-time y empleados part-time. La mayor\xeda de los datos relacionados a los dos tipos de empleados es la misma, pero probablemente existir\xe1n algunas diferencias. En la programaci\xf3n orientada a objetos podremos definir un tipo general de empleado y luego, a partir de ese, definir los tipos m\xe1s espec\xedficos: full-time y part-time. Cuando una operaci\xf3n en un empleado no depende de si el empleado trabaja tiempo completo o medio tiempo, entonces la operaci\xf3n es manejada dentro por el tipo m\xe1s general. De lo contrario, se manejar\xe1 en los tipos espec\xedficos. "),(0,o.kt)("p",null,"Definir similitudes y diferencias entre objetos de esta forma se conoce como ",(0,o.kt)("strong",{parentName:"p"},"herencia"),", el tercer pilar de la programaci\xf3n orientada a objetos que introduciremos. Se trata de una relaci\xf3n entre una o m\xe1s clases en la que se comparten los atributos y m\xe9todos definidos en otra clase. "),(0,o.kt)("p",null,"La clase de la que se hereda se la denomina clase padre, super-tipo o ",(0,o.kt)("strong",{parentName:"p"},"clase base"),", y a la clase que hereda se la conoce como clase hija, sub-tipo o ",(0,o.kt)("strong",{parentName:"p"},"clase derivada"),". Una clase derivada posee los atributos y m\xe9todos de la clase base, adem\xe1s de los propios."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Ejemplo herencia",src:n(1024).Z,width:"386",height:"510"})),(0,o.kt)("p",null,"La idea y objetivo principal radican en crear una clase que defina un comportamiento (m\xe9todos) y caracter\xedsticas (atributos) que luego podr\xe1n ser usados en otra clase. Vamos a poder compartir la estructura y miembros de esta primer clase definida y agregar contenido adicional. La clase base es entonces una ",(0,o.kt)("strong",{parentName:"p"},"generalizaci\xf3n")," de un grupo de caracter\xedsticas y comportamiento que tienen en com\xfan las clases derivadas, mientras que las \xfaltimas son una ",(0,o.kt)("strong",{parentName:"p"},"especializaci\xf3n")," de la clase base.  "),(0,o.kt)("p",null,"La herencia debe aplicarse cuando existe la relaci\xf3n sem\xe1ntica ",(0,o.kt)("em",{parentName:"p"},'"es un"')," entre la clase derivada y la clase base: un perro es una mascota, una mascota es un animal, un empleado de tiempo completo es un empleado, un dolar es una moneda, una lapicera es un producto, etc. Que existan objetos que compartan ciertos atributos y operaciones no es una raz\xf3n suficiente para aplicar herencia, deben adem\xe1s cumplir con esta condici\xf3n de ser la entidad padre desde el significado. Una mascota y su compa\xf1ero humano, ambos tienen nombre y fecha de nacimiento, pero la mascota no es una persona ni tampoco un cliente.    "),(0,o.kt)("h2",{id:"tipos-de-herencia"},"Tipos de herencia"),(0,o.kt)("p",null,"Existen diferentes tipos de herencia que variar\xe1n dependiendo del lenguaje que estemos usando."),(0,o.kt)("h4",{id:"herencia-simple"},"Herencia simple"),(0,o.kt)("p",null,"En la herencia simple una clase derivada hereda de una sola clase base, adquiriendo todos sus miembros. "),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Herencia simple",src:n(6135).Z,width:"300",height:"300"})),(0,o.kt)("h4",{id:"herencia-m\xfaltiple"},"Herencia m\xfaltiple"),(0,o.kt)("p",null,"Se dice herencia m\xfaltiple cuando una clase puede tener m\xe1s de una clase base, adquiriendo los miembros de todos sus padres."),(0,o.kt)("p",null,"Este tipo de herencia es muy dif\xedcil de implementar de forma eficaz. Puede terminar amplificando todos los riesgos y aspectos negativos de aplicar herencia. "),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Herencia m\xfaltiple",src:n(2673).Z,width:"300",height:"300"})),(0,o.kt)("h4",{id:"herencia-multi-nivel"},"Herencia multi-nivel"),(0,o.kt)("p",null,"La herencia multi-nivel se da cuando una clase derivada hereda de otra clase derivada que a su vez hereda de otra clase. "),(0,o.kt)("p",null,"Imaginemos que tenemos la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Perro"),", que hereda de ",(0,o.kt)("inlineCode",{parentName:"p"},"Mascota"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"Mascota"),", a su vez, hereda de ",(0,o.kt)("inlineCode",{parentName:"p"},"Animal"),". Esto es herencia multi-nivel. ",(0,o.kt)("inlineCode",{parentName:"p"},"Mascota")," heredar\xe1 atributos y m\xe9todos de ",(0,o.kt)("inlineCode",{parentName:"p"},"Animal"),", a su vez ",(0,o.kt)("inlineCode",{parentName:"p"},"Perro")," heredar\xe1 los miembros de ",(0,o.kt)("inlineCode",{parentName:"p"},"Mascota")," incluyendo aquellos heredados de ",(0,o.kt)("inlineCode",{parentName:"p"},"Animal"),"."),(0,o.kt)("p",null,"Esta propiedad de la herencia se conoce como ",(0,o.kt)("strong",{parentName:"p"},"transitividad"),": Si una clase ",(0,o.kt)("inlineCode",{parentName:"p"},"C")," hereda de una clase ",(0,o.kt)("inlineCode",{parentName:"p"},"B")," y, a su vez, ",(0,o.kt)("inlineCode",{parentName:"p"},"B")," hereda de ",(0,o.kt)("inlineCode",{parentName:"p"},"A"),", entonces ",(0,o.kt)("inlineCode",{parentName:"p"},"C")," tambi\xe9n hereda de ",(0,o.kt)("inlineCode",{parentName:"p"},"A"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Herencia multi-nivel",src:n(9147).Z,width:"300",height:"350"})),(0,o.kt)("h4",{id:"herencia-jer\xe1rquica"},"Herencia jer\xe1rquica"),(0,o.kt)("p",null,"En este tipo de herencia una clase sirve como base de m\xe1s de un sub-tipo. Por ejemplo, la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Animal")," puede tener como derivadas a ",(0,o.kt)("inlineCode",{parentName:"p"},"AnimalDomesticado")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"AnimalNoDomesticado"),", ambas tienen una clase base en com\xfan. "),(0,o.kt)("h4",{id:"herencia-h\xedbrida"},"Herencia h\xedbrida"),(0,o.kt)("p",null,"Hablamos de herencia h\xedbrida cuando se mezclan dos o m\xe1s de los tipos de herencia antes nombrados. Por ejemplo, la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Animal")," es padre de ",(0,o.kt)("inlineCode",{parentName:"p"},"Mascota")," y esta es base de ",(0,o.kt)("inlineCode",{parentName:"p"},"Perro")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"Gato"),", se trata de una mezcla entre herencia jer\xe1rquica y herencia multi-nivel."),(0,o.kt)("h2",{id:"solid-principio-de-sustituci\xf3n-de-liskov"},"S.O.L.I.D: Principio de sustituci\xf3n de Liskov"),(0,o.kt)("p",null,"En 1988, la cient\xedfica ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Barbara_Liskov"},"Barbara Liskov")," propuso que cada clase que hereda de otra debe poder usarse como su padre sin necesidad de conocer las diferencias entre ellas. En otras palabras, todas las operaciones definidas en la clase base deben significar lo mismo cuando son reutilizadas por las clases derivadas. "),(0,o.kt)("p",null,"Si tenemos una clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Cuenta")," y sus derivadas ",(0,o.kt)("inlineCode",{parentName:"p"},"CuentaCorriente")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"CajaDeAhorro"),", deber\xeda poder invocar cualquiera de los m\xe9todos definidos en la clase base sin preocuparme sobre cu\xe1l es el tipo espec\xedfico del objeto dentro de la jerarqu\xeda de herencia. Las implementaciones de un determinado m\xe9todo en cualquiera de las clases derivadas deber\xedan retornar la misma informaci\xf3n o realizar la misma acci\xf3n, m\xe1s all\xe1 de las diferencias en c\xf3mo lo resuelva. "),(0,o.kt)("p",null,"Lo primero que debemos saber es que, un sub-tipo es tambi\xe9n del tipo padre, por lo que se pueden almacenar referencias a objetos de tipos derivados en variables o argumentos del tipo base. "),(0,o.kt)("p",null,"Si ",(0,o.kt)("inlineCode",{parentName:"p"},"S")," hereda de ",(0,o.kt)("inlineCode",{parentName:"p"},"T"),", entonces los objetos de tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"T")," podr\xe1n ser reemplazados por objetos del tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"S"),". "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"T objeto = new S();\n\nAnimal animal = new Perro();\nPersona persona = new Persona();\n")),(0,o.kt)("p",null,"En segundo lugar, cuando reemplacemos una instancia del tipo base por una del tipo derivado, no deber\xeda afectar el funcionamiento del sistema. Analicemos el siguiente ejemplo donde ",(0,o.kt)("inlineCode",{parentName:"p"},"CuentaCorriente")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"CajaDeAhorro")," heredan de ",(0,o.kt)("inlineCode",{parentName:"p"},"Cuenta"),". "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"Cuenta cuenta = new CuentaCorriente();\n\ncuenta.CobrarComisiones();\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"Cuenta cuenta = new CajaDeAhorro();\n\ncuenta.CobrarComisiones();\n")),(0,o.kt)("p",null,"El m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"CobrarComisiones")," del tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"Cuenta")," deber\xeda realizar un d\xe9bito en la cuenta de acuerdo a las comisiones que apliquen por el servicio. Si bien dependiendo del tipo de cuenta se pueden llegar a debitar distintos montos, lo que hace el m\xe9todo no cambia. El significado de la operaci\xf3n no cambia, puede llegar a haber diferencias en los detalles del c\xf3mo lo resuelve, pero la acci\xf3n desde lo sem\xe1ntico es la misma. "),(0,o.kt)("p",null,"Se romper\xeda el principio de sustituci\xf3n de Liskov si ",(0,o.kt)("inlineCode",{parentName:"p"},"CobrarComisiones")," de ",(0,o.kt)("inlineCode",{parentName:"p"},"CuentaCorriente")," adem\xe1s de debitar las comisiones, enviara los datos al sistema de contabilidad y el de ",(0,o.kt)("inlineCode",{parentName:"p"},"CajaDeAhorro")," no. En este caso, sustituir el tipo base por uno u otro tipo derivado no har\xeda lo mismo.  "),(0,o.kt)("h2",{id:"beneficios-de-aplicar-herencia"},"Beneficios de aplicar herencia"),(0,o.kt)("p",null,"El prop\xf3sito de la herencia es simplificar el c\xf3digo al definir una clase que especifica elementos comunes a dos o m\xe1s clases derivadas. Nos ayuda a eliminar la duplicaci\xf3n de c\xf3digo y datos, reutilizando elementos comunes de objetos estrechamente relacionados. "),(0,o.kt)("p",null,"Nos permite organizar de manera m\xe1s \xf3ptima las clases que componen la realidad de nuestro programa, agrup\xe1ndolas por criterios que compartan. Una vez detectado lo que tienen en com\xfan, podremos implementarlo en una clase base y luego declarar clases m\xe1s espec\xedficas que hereden de ella y agreguen nuevos datos y funcionalidad. Construimos nuevas clases a partir de otra ya existente, en vez de empezar desde cero. "),(0,o.kt)("h2",{id:"riesgos-de-aplicar-herencia"},"Riesgos de aplicar herencia"),(0,o.kt)("p",null,"La herencia es una herramienta muy poderosa que nos da la programaci\xf3n orientada a objetos, pero puede llegar a ser contraproducente cuando se utiliza sin criterio o en casos donde no aplica. "),(0,o.kt)("p",null,"En principio la herencia agrega complejidad a la soluci\xf3n. Debe ser usada con criterio y cuidado, y estar correctamente documentada. "),(0,o.kt)("p",null,"Cuando decidimos crear una nueva clase heredando de otra existente, estamos diciendo que la nueva clase ",(0,o.kt)("em",{parentName:"p"},'"es una"')," versi\xf3n m\xe1s especializada de la clase base. La clase base impone definiciones y restricciones sobre c\xf3mo operar\xe1 la clase derivada. Si la clase derivada no va a adherir completamente a la interfaz de la clase base, entonces no corresponde aplicar herencia.  "),(0,o.kt)("p",null,"Cumplir con el principio de sustituci\xf3n de Liskov es importante. Si debemos preocuparnos constantemente sobre las posibles diferencias entre las implementaciones de una misma operaci\xf3n en las distintas clases derivadas, entonces estamos incrementando la complejidad de la soluci\xf3n en vez de reducirla. "),(0,o.kt)("h2",{id:"herencia-y-composici\xf3n"},"Herencia y composici\xf3n"),(0,o.kt)("p",null,"La herencia se contrasta con el concepto de composici\xf3n. La ",(0,o.kt)("strong",{parentName:"p"},"composici\xf3n")," es la idea de que un objeto contiene o est\xe1 compuesta de otros objetos. Por ejemplo, un equipo de futbol se integra de jugadores."),(0,o.kt)("p",null,"La implementaci\xf3n es sencilla, los objetos de los que se compone un tipo deber\xe1n ser atributos de la clase contenedora. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"public class EquipoFutbol\n{\n    private List<Jugador> jugadores;\n}\n")),(0,o.kt)("p",null,"La herencia es una relaci\xf3n ",(0,o.kt)("em",{parentName:"p"},'"es un"'),", mientras que la composici\xf3n refleja una relaci\xf3n ",(0,o.kt)("em",{parentName:"p"},'"tiene un"'),". "),(0,o.kt)("p",null,"La composici\xf3n es utilizada con mucha m\xe1s frecuencia que la herencia y tiene menos puntos en contra. En principio otorga mayor flexibilidad al dise\xf1o. Es m\xe1s natural construir clases a partir de varios componentes que tratar de encontrar puntos en com\xfan entre ellos y crear una jerarqu\xeda de herencia. El pedal del acelerador y el volante comparten muy pocos rasgos en com\xfan, pero ambos son componentes vitales en un auto. "),(0,o.kt)("p",null,"La composici\xf3n tambi\xe9n resulta m\xe1s estable frente a los cambios en las reglas de negocio, ya que es m\xe1s f\xe1cil de adaptar frente a un cambio o particularidad en alguna de las clases.  "),(0,o.kt)("p",null,"Existen lenguajes, como ",(0,o.kt)("a",{parentName:"p",href:"https://golang.org/"},"Go"),", que no tienen herencia y s\xf3lo se puede trabajar con composici\xf3n."))}m.isMDXComponent=!0},9147:function(e,a,n){a.Z=n.p+"assets/images/Multilevel_Inheritance-2758d778fa4ae9ba19592656c5c14986.jpg"},2673:function(e,a,n){a.Z=n.p+"assets/images/Multiple_Inheritance-2b9d8879642e341599f74d89687f803e.jpg"},6135:function(e,a,n){a.Z=n.p+"assets/images/Single_Inheritance-c56cb29ddb187496d672785c99da3976.jpg"},1024:function(e,a,n){a.Z=n.p+"assets/images/herencia_animal-260c07b05f903c9b04231f27994caede.PNG"}}]);