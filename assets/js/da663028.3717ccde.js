"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[9635],{3905:function(e,a,r){r.d(a,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function t(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function o(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?o(Object(r),!0).forEach((function(a){t(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function s(e,a){if(null==e)return{};var r,n,t=function(e,a){if(null==e)return{};var r,n,t={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],a.indexOf(r)>=0||(t[r]=e[r]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var l=n.createContext({}),c=function(e){var a=n.useContext(l),r=a;return e&&(r="function"==typeof e?e(a):i(i({},a),e)),r},u=function(e){var a=c(e.components);return n.createElement(l.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var r=e.components,t=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=t,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return r?n.createElement(f,i(i({ref:a},u),{},{components:r})):n.createElement(f,i({ref:a},u))}));function m(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s.mdxType="string"==typeof e?e:t,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2578:function(e,a,r){r.r(a),r.d(a,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var n=r(7462),t=r(3366),o=(r(7294),r(3905)),i=["components"],s={title:"Apuntes - Herencia",sidebar_label:"Herencia",slug:"/clases/herencia/apuntes/herencia",hide_table_of_contents:!1,hide_title:!1,author:null,authorURL:null},l=void 0,c={unversionedId:"clases/herencia/Apuntes/herencia",id:"clases/herencia/Apuntes/herencia",isDocsHomePage:!1,title:"Apuntes - Herencia",description:"Herencia",source:"@site/docs/clases/08-herencia/Apuntes/00-herencia.md",sourceDirName:"clases/08-herencia/Apuntes",slug:"/clases/herencia/apuntes/herencia",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/herencia/apuntes/herencia",tags:[],version:"current",lastUpdatedBy:"mauriciocerizza",lastUpdatedAt:1631253768,formattedLastUpdatedAt:"9/10/2021",sidebarPosition:0,frontMatter:{title:"Apuntes - Herencia",sidebar_label:"Herencia",slug:"/clases/herencia/apuntes/herencia",hide_table_of_contents:!1,hide_title:!1,author:null,authorURL:null},sidebar:"Clases",previous:{title:"\xcdndice",permalink:"/programacion_2_laboratorio_2_apuntes/docs/herencia"},next:{title:"Cuestionario",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/herencia/apuntes/cuestionario"}},u=[{value:"Herencia",id:"herencia",children:[]}],p={toc:u};function d(e){var a=e.components,r=(0,t.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"herencia"},"Herencia"),(0,o.kt)("p",null,"Cuando nos referimos a herencia en programaci\xf3n orientada a objetos hablamos de una relaci\xf3n entre clases. "),(0,o.kt)("p",null,"La idea y objetivo principal radican en crear una clase que defina un comportamiento (m\xe9todos) y caracter\xedsticas (atributos) que luego podr\xe1n ser usados en otra clase. Vamos a poder compartir la estructura y miembros de esta primer clase definida y agregar contenido adicional. "),(0,o.kt)("p",null,"\xbfPor qu\xe9 querr\xedamos usar la herencia en vez de definir clases auto-suficientes? Porque la herencia nos permite contar con muchas ventajas. "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Podremos organizar de manera m\xe1s \xf3ptima las clases que compongan la realidad de nuestro programa, agrup\xe1ndolas por criterios que compartan. Una vez detectado \u201cesto que tienen en com\xfan\u201d podremos implementar esto en una clase base para luego poder heredar de esta, aumentando su funcionalidad (especializandola). ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Vamos a poder crear clases a partir de otra ya existente, en vez de empezar desde cero. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Podremos continuar con la herencia tanto como queramos, de manera que cada clase hija podr\xe1 expandir mas y mas la funcionalidad de su clase padre. "))),(0,o.kt)("p",null,"Una vez definido esto, es necesario tener en cuenta algunos aspectos que se dan en C# en especifico (es importante recordar que la herencia es algo que se da en cualquier lenguaje orientado a objetos y no solo en C#)."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"La clase de la cual se hereda se conoce como clase base o padre. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"La clase que hereda de otra se conoce como clase hija.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"La herencia en C# no es m\xfaltiple, es decir que cada clase podr\xe1 heredar de solo una clase base, al contrario de lo que pasa en lenguajes como C++ donde la herencia m\xfaltiple si esta permitida. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\xbfQue pasa con los atributos privados de la clase base?, la clase hija los hereda, pero no puede acceder los. En caso de ser necesarios, se deber\xe1 definir m\xe9todos o propiedades que le den visibilidad a estos atributos.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\xbfY con los atributos p\xfablicos de la clase base? Estos pasan a ser impl\xedcitamente parte de la clase hija.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Al contrario del resto, los constructores no se heredan.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\xbfQue pasa si quiero que un atributo de mi clase base sea accesible solo en mis clases hijas? En esta situaci\xf3n entra en juego el modificador de visibilidad protected, al definir atributos con este modificador haremos que este sea visible solo dentro de la relaci\xf3n de herencia. Por lo que para una clase hija el modificador protected es equivalente a public pero para una clase ajena a la relaci\xf3n este modificador es igual al private. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\xbfComo hago referencia al constructor o a m\xe9todos de la clase padre dentro de la clase hija?, utilizando el operador base, as\xed explicitaremos que se hace referencia a la clase padre. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Y si quiero que mi clase no pueda ser heredada \xbfcomo hago?, para poder lograr esto, definiremos a la clase con el modificador sealed, de esta manera explicitaremos que nuestra clase no puede tener clases hijas, (es importante recordar que gran parte de las clases son aut\xf3nomas y no est\xe1n pensadas para ser heredadas)."))))}d.isMDXComponent=!0}}]);