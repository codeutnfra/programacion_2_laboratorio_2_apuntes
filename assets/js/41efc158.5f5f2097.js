"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[2862],{3905:function(e,a,t){t.d(a,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var c=r.createContext({}),i=function(e){var a=r.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=i(e.components);return r.createElement(c.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},d=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,s=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=i(t),m=n,b=d["".concat(c,".").concat(m)]||d[m]||u[m]||s;return t?r.createElement(b,o(o({ref:a},p),{},{components:t})):r.createElement(b,o({ref:a},p))}));function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var s=t.length,o=new Array(s);o[0]=d;var l={};for(var c in a)hasOwnProperty.call(a,c)&&(l[c]=a[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var i=2;i<s;i++)o[i]=t[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2065:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return l},metadata:function(){return c},toc:function(){return i},default:function(){return u}});var r=t(7462),n=t(3366),s=(t(7294),t(3905)),o=["components"],l={sidebar_label:"Clases abstractas",slug:"/clases/polimorfismo/apuntes/abstract",hide_table_of_contents:!1,hide_title:!0,author:null,authorURL:null},c={unversionedId:"clases/polimorfismo/Apuntes/clases-abstractas",id:"clases/polimorfismo/Apuntes/clases-abstractas",isDocsHomePage:!1,title:"clases-abstractas",description:"Clases abstractas",source:"@site/docs/clases/09-polimorfismo/Apuntes/01-clases-abstractas.md",sourceDirName:"clases/09-polimorfismo/Apuntes",slug:"/clases/polimorfismo/apuntes/abstract",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/polimorfismo/apuntes/abstract",version:"current",lastUpdatedBy:"mauriciocerizza",lastUpdatedAt:1632109048,formattedLastUpdatedAt:"9/20/2021",sidebar_label:"Clases abstractas",sidebarPosition:1,frontMatter:{sidebar_label:"Clases abstractas",slug:"/clases/polimorfismo/apuntes/abstract",hide_table_of_contents:!1,hide_title:!0,author:null,authorURL:null},sidebar:"Clases",previous:{title:"Apuntes - Polimorfismo y clases abstractas",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/polimorfismo/apuntes/polimorfismo"},next:{title:"Cuestionario - Polimorfismo y clases abstractas",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/polimorfismo/apuntes/cuestionario"}},i=[{value:"Clases abstractas",id:"clases-abstractas",children:[]},{value:"M\xe9todos abstractos",id:"m\xe9todos-abstractos",children:[]}],p={toc:i};function u(e){var a=e.components,t=(0,n.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"clases-abstractas"},"Clases abstractas"),(0,s.kt)("p",null,"Las clases se pueden declarar como abstractas poniendo la palabra reservada ",(0,s.kt)("inlineCode",{parentName:"p"},"abstract")," antes de la definici\xf3n de la clase."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract class Figura{\n    //...\n} \n")),(0,s.kt)("p",null,"Las ",(0,s.kt)("strong",{parentName:"p"},"clases abstractas")," no se pueden instanciar, su prop\xf3sito es proporcionar una definici\xf3n com\xfan que modele una jerarqu\xeda de herencia. Por ejemplo, se puede definir una clase abstracta que se usa como par\xe1metro para muchas de sus funciones y que los programadores proporcionen su propia implementaci\xf3n a partir de una clase derivada."),(0,s.kt)("p",null,"No es posible marcar una clase abstracta con el modificador ",(0,s.kt)("inlineCode",{parentName:"p"},"sealed")," porque ambos modificadores tienen significados opuestos. El modificador ",(0,s.kt)("inlineCode",{parentName:"p"},"sealed")," evita que una clase se pueda heredar y el modificador ",(0,s.kt)("inlineCode",{parentName:"p"},"abstract")," requiere que se herede una clase."),(0,s.kt)("p",null,"Es posible tener variables con tipos que sean abstractos. Estas variables ser\xe1n ",(0,s.kt)("inlineCode",{parentName:"p"},"null")," o contendr\xe1n referencias a instancias de una clase derivada no-abstracta."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract class Figura\n{\n    //...\n} \n\npublic class Cuadrado : Figura\n{\n    //...\n} \n\nFigura figura = new Cuadrado();\n")),(0,s.kt)("h2",{id:"m\xe9todos-abstractos"},"M\xe9todos abstractos"),(0,s.kt)("p",null,"Podemos definir un m\xe9todo como abstracto con la palabra reservada ",(0,s.kt)("inlineCode",{parentName:"p"},"abstract")," antes del tipo de retorno del m\xe9todo. "),(0,s.kt)("p",null,"Por ejemplo:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract class Figura\n{\n    public abstract float CalcularArea();\n}\n")),(0,s.kt)("p",null,"Los m\xe9todos abstractos no tienen implementaci\xf3n, por lo que la definici\xf3n del m\xe9todo va seguida de un ",(0,s.kt)("inlineCode",{parentName:"p"},";")," en lugar del cuerpo del m\xe9todo. Las clases derivadas de la clase abstracta ",(0,s.kt)("strong",{parentName:"p"},"deben")," dar una implementaci\xf3n a todos los m\xe9todos abstractos. "),(0,s.kt)("p",null,"Las clases abstractas son las \xfanicas que pueden contener miembros abstractos, por lo que las declaraciones de m\xe9todos abstractos s\xf3lo se permiten en clases abstractas."),(0,s.kt)("p",null,"La implementaci\xf3n la proporciona un m\xe9todo ",(0,s.kt)("em",{parentName:"p"},"override")," que es miembro de una clase no abstracta. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract class Cuadrado : Figura\n{\n    int lado;\n   \n    public override float CalcularArea(){\n        return lado * lado;\n    }\n}\n")))}u.isMDXComponent=!0}}]);