"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[3152],{3905:function(e,a,n){n.d(a,{Zo:function(){return d},kt:function(){return u}});var o=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,o,t=function(e,a){if(null==e)return{};var n,o,t={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var l=o.createContext({}),p=function(e){var a=o.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},d=function(e){var a=p(e.components);return o.createElement(l.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},m=o.forwardRef((function(e,a){var n=e.components,t=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=t,k=m["".concat(l,".").concat(u)]||m[u]||c[u]||r;return n?o.createElement(k,i(i({ref:a},d),{},{components:n})):o.createElement(k,i({ref:a},d))}));function u(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s.mdxType="string"==typeof e?e:t,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6974:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var o=n(7462),t=n(3366),r=(n(7294),n(3905)),i=["components"],s={sidebar_label:"Introducci\xf3n a C#",slug:"/clases/introduccion/apuntes/introduccion-c-sharp",hide_table_of_contents:!1,hide_title:!0,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},l=void 0,p={unversionedId:"clases/introduccion/Apuntes/introduccion-c-sharp",id:"clases/introduccion/Apuntes/introduccion-c-sharp",isDocsHomePage:!1,title:"introduccion-c-sharp",description:"Introducci\xf3n a C#",source:"@site/docs/clases/01-introduccion/Apuntes/02-introduccion-c-sharp.md",sourceDirName:"clases/01-introduccion/Apuntes",slug:"/clases/introduccion/apuntes/introduccion-c-sharp",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/introduccion/apuntes/introduccion-c-sharp",version:"current",lastUpdatedBy:"mauriciocerizza",lastUpdatedAt:1629773541,formattedLastUpdatedAt:"8/23/2021",sidebarPosition:2,frontMatter:{sidebar_label:"Introducci\xf3n a C#",slug:"/clases/introduccion/apuntes/introduccion-c-sharp",hide_table_of_contents:!1,hide_title:!0,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},sidebar:"Clases",previous:{title:"Crear un proyecto de consola",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/introduccion/apuntes/proyecto-consola"},next:{title:"Common Type System",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/introduccion/apuntes/common-type-system"}},d=[{value:"Introducci\xf3n a C#",id:"introducci\xf3n-a-c",children:[]},{value:"Caracter\xedsticas de C#",id:"caracter\xedsticas-de-c",children:[]},{value:"Gram\xe1tica de C#",id:"gram\xe1tica-de-c",children:[{value:"Sintaxis de C#",id:"sintaxis-de-c",children:[]},{value:"Vocabulario de C#",id:"vocabulario-de-c",children:[]}]},{value:"Trabajando con variables",id:"trabajando-con-variables",children:[{value:"Operadores de asignaci\xf3n",id:"operadores-de-asignaci\xf3n",children:[]},{value:"Constantes",id:"constantes",children:[]},{value:"Nombres de variables y atributos",id:"nombres-de-variables-y-atributos",children:[]}]}],c={toc:d};function m(e){var a=e.components,n=(0,t.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introducci\xf3n-a-c"},"Introducci\xf3n a C#"),(0,r.kt)("p",null,"Durante nuestro viaje a trav\xe9s de las caracter\xedsticas comunes de los lenguajes de alto nivel y la programaci\xf3n orientada a objetos nos acompa\xf1ar\xe1 el lenguaje de programaci\xf3n C#. ",(0,r.kt)("strong",{parentName:"p"},"C#"),"  (pronunciado 'si sharp' en ingl\xe9s) es un lenguaje de programaci\xf3n dise\xf1ado para generar programas sobre la plataforma .NET. "),(0,r.kt)("p",null,"Tal vez algunas de las caracter\xedsticas de este lenguaje les parezcan similares a otros lenguajes que conozcan, y est\xe1n en lo correcto. El equipo de C#, desde sus inicios, no dud\xf3 en tomar grandes ideas de otros lenguajes y reformarlas para incorporarlas a C#. Las principales influencias han sido Java (sobre todo en los inicios), y m\xe1s cerca en el tiempo el mism\xedsimo F#. Tambi\xe9n podemos encontrar similitudes con C, C++ y JavaScript. "),(0,r.kt)("p",null,"Fue dise\xf1ado por el ingeniero de Microsoft ",(0,r.kt)("a",{parentName:"p",href:"https://es.wikipedia.org/wiki/Anders_Hejlsberg"},"Anders Hejlsberg"),", quien tambi\xe9n est\xe1 involucrado en el desarrollo de Typescript desde 2012. "),(0,r.kt)("h2",{id:"caracter\xedsticas-de-c"},"Caracter\xedsticas de C#"),(0,r.kt)("h4",{id:"compilaci\xf3n-h\xedbrida"},"Compilaci\xf3n h\xedbrida"),(0,r.kt)("p",null,"Para construir programas con C# se requiere de un ",(0,r.kt)("strong",{parentName:"p"},"compilador")," para traducir todo el c\xf3digo fuente a un lenguaje que permita ejecutar la aplicaci\xf3n en una computadora. C# se compila primero a un lenguaje intermedio y posteriormente al ejecutarse es recompilado a lenguaje nativo/m\xe1quina. "),(0,r.kt)("p",null,"Esto se contrapone a los lenguajes cuyo c\xf3digo fuente es ejecutado l\xednea a l\xednea y en tiempo de ejecuci\xf3n por un ",(0,r.kt)("strong",{parentName:"p"},"int\xe9rprete"),"."),(0,r.kt)("h4",{id:"orientado-a-objetos"},"Orientado a objetos"),(0,r.kt)("p",null,"El lenguaje ofrece una serie de caracter\xedsticas orientadas a objetos como soporte para herencia, polimorfismo y encapsulamiento. El ",(0,r.kt)("strong",{parentName:"p"},"paradigma de programaci\xf3n orientada a objetos")," se enfoca en en las relaciones entre clases y objetos. Profundizaremos este tema durante la cursada. "),(0,r.kt)("h4",{id:"orientado-a-componentes"},"Orientado a componentes"),(0,r.kt)("p",null,"Tambi\xe9n presenta caracter\xedsticas que permiten el ",(0,r.kt)("strong",{parentName:"p"},"desarrollo basado en componentes"),". Un componente de software individual es un paquete de software o un m\xf3dulo que encapsula un conjunto de datos o funciones relacionadas. Se trata de construir piezas de software d\xe9bilmente acopladas (poco dependientes entre si), permitiendo la reutilizaci\xf3n e intercambio de las mismas. "),(0,r.kt)("h4",{id:"seguridad-de-tipos"},"Seguridad de tipos"),(0,r.kt)("p",null,"Es un lenguaje principalmente de tipado est\xe1tico."),(0,r.kt)("p",null,"Recordemos la diferencia entre tipado est\xe1tico y tipado din\xe1mico."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Tipado est\xe1tico")," \u2192 Decimos que un lenguaje es de tipado est\xe1tico cuando los tipos de las variables tienen que definirse antes de compilar el programa.\n",(0,r.kt)("strong",{parentName:"p"},"Tipado din\xe1mico")," \u2192 Decimos que un lenguaje es de tipado din\xe1mico cuando los tipos de las variables se definen durante la ejecuci\xf3n del programa."),(0,r.kt)("p",null,"C# cuenta con caracter\xedsticas que permiten trabajar con tipado din\xe1mico, pero no es lo m\xe1s com\xfan. "),(0,r.kt)("h4",{id:"garbage-collection"},"Garbage Collection"),(0,r.kt)("p",null,"Est\xe1 integrado un programa especial que se encarga de la liberaci\xf3n de memoria no utilizada en el segmento heap. A este programa se lo conoce como ",(0,r.kt)("strong",{parentName:"p"},"Garbage Collector")," y nos evita tener que programar expl\xedcitamente instrucciones para la administraci\xf3n de memoria. Esto facilita el desarrollo y genera beneficios de seguridad y eficiencia."),(0,r.kt)("h4",{id:"sistema-de-tipos-unificado"},"Sistema de tipos unificado"),(0,r.kt)("p",null,"Todos los tipos de datos en C#, incluyendo los primitivos (como ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," o ",(0,r.kt)("inlineCode",{parentName:"p"},"double"),"), heredan de la clase ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object"),". Esto significa que todos los tipos de dato tienen una serie de operaciones/funcionalidades en com\xfan. Los valores de cualquier tipo pueden ser almacenados, transportados y operadores de una manera consistente. "),(0,r.kt)("h4",{id:"case-sensitive"},"Case sensitive"),(0,r.kt)("p",null,"C# es un lenguaje que distingue may\xfasculas de min\xfasculas. No es lo mismo una variable llamada ",(0,r.kt)("em",{parentName:"p"},"numero")," a una llamada ",(0,r.kt)("em",{parentName:"p"},"Numero"),"."),(0,r.kt)("h2",{id:"gram\xe1tica-de-c"},"Gram\xe1tica de C#"),(0,r.kt)("p",null,"Los lenguajes de computaci\xf3n, al igual que los lenguajes humanos, tienen sintaxis y sem\xe1ntica."),(0,r.kt)("p",null,"La ",(0,r.kt)("strong",{parentName:"p"},"sintaxis")," es una serie de reglas que define las combinaciones correctas de s\xedmbolos y el orden para formar sentencias y expresiones v\xe1lidas. En otras palabras, define c\xf3mo debe estar escrito y estructurado un lenguaje para construir sentencias v\xe1lidas. "),(0,r.kt)("p",null,"Algunos ejemplos de sintaxis de C# son terminar las sentencias con un punto y coma, o encerrar las expresiones condicionales de un bloque if dentro de par\xe9ntesis. "),(0,r.kt)("p",null,"Si la sintaxis es inv\xe1lida el programa no compila. "),(0,r.kt)("p",null,"El ",(0,r.kt)("strong",{parentName:"p"},"vocabulario")," del lenguaje son una serie de palabras reservadas y operadores que sirven para construir sentencias y expresiones siguiendo las reglas de sintaxis. "),(0,r.kt)("p",null,"La ",(0,r.kt)("strong",{parentName:"p"},"sem\xe1ntica")," es el signicado que surge de la combinaci\xf3n de esas sentencias y expresiones con una sintaxis v\xe1lida. \xbfQu\xe9 instrucci\xf3n generan a la computadora? \xbftiene sentido l\xf3gico?."),(0,r.kt)("p",null,"Por ejemplo, en espa\xf1ol la oraci\xf3n ",(0,r.kt)("em",{parentName:"p"},'"\xc9l tomar agua"')," tiene una sintaxis incorrecta pero una sem\xe1ntica que se puede inferir. Por otro lado, en la oraci\xf3n ",(0,r.kt)("em",{parentName:"p"},'"\xc9l toma arroz"')," la sintaxis es correcta pero no la sem\xe1ntica, el significado no es coherente."),(0,r.kt)("p",null,"Analicemos el siguiente fragmento de c\xf3digo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'if (condicion)\n{\n    Console.WriteLine("Entiendo sintaxis y sem\xe1ntica.");\n}\nelse\n{\n    Console.WriteLine("No entiendo nada.");\n}\n')),(0,r.kt)("p",null,"Entre los elementos de sintaxis podemos identificar empezar el bloque con la palabra reservada ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," seguida de la expresi\xf3n condicional entre par\xe9ntesis, el uso de llaves y la terminaci\xf3n de la sentencia ",(0,r.kt)("inlineCode",{parentName:"p"},"Console.WriteLine")," con ",(0,r.kt)("inlineCode",{parentName:"p"},";"),". Si pusieramos el if sin par\xe9ntesis o nos faltara una de las llaves o nos olvid\xe1ramos de poner el punto y coma, el programa no compilar\xeda ya que la sintaxis es inv\xe1lida. "),(0,r.kt)("p",null,"De la sem\xe1ntica se desprende que si la expresi\xf3n condicional se cumple (es verdadera) entonces se mostrar\xe1 en la salida de la consola la frase ",(0,r.kt)("em",{parentName:"p"},'"Entiendo sintaxis y sem\xe1ntica"'),", de lo contrario mostrar\xe1 ",(0,r.kt)("em",{parentName:"p"},'"No entiendo nada"'),"."),(0,r.kt)("h3",{id:"sintaxis-de-c"},"Sintaxis de C#"),(0,r.kt)("h4",{id:"sentencias"},"Sentencias"),(0,r.kt)("p",null,"Cuando escribimos en espa\xf1ol, marcamos el fin de una oraci\xf3n con un punto. Una oraci\xf3n se compone de m\xfaltiples palabras y frases con un orden espec\xedfico. Los lenguajes de programaci\xf3n tambi\xe9n tienen reglas de sintaxis. "),(0,r.kt)("p",null,"C# indica el fin de una declaraci\xf3n con un punto y coma. Una ",(0,r.kt)("strong",{parentName:"p"},"declaraci\xf3n (",(0,r.kt)("em",{parentName:"strong"},"statement"),")")," puede estar compuesta de m\xfaltiples ",(0,r.kt)("strong",{parentName:"p"},"variables")," y ",(0,r.kt)("strong",{parentName:"p"},"expresiones (",(0,r.kt)("em",{parentName:"strong"},"expressions"),")"),". En el siguiente ejemplo, ",(0,r.kt)("inlineCode",{parentName:"p"},"sueldoNeto")," es una variable y ",(0,r.kt)("inlineCode",{parentName:"p"},"sueldoBruto - aportes - impuestos")," es una expresi\xf3n compuesta de 3 ",(0,r.kt)("strong",{parentName:"p"},"operandos")," (",(0,r.kt)("inlineCode",{parentName:"p"},"sueldoBruto"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"aportes")," y ",(0,r.kt)("inlineCode",{parentName:"p"},"impuestos"),") y los ",(0,r.kt)("strong",{parentName:"p"},"operadores")," ",(0,r.kt)("inlineCode",{parentName:"p"},"-"),". "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"decimal sueldoNeto = sueldoBruto - aportes - impuestos;\n")),(0,r.kt)("p",null,"El orden de los operadores y los operandos importa, si los cambiaramos de lugar dar\xeda un resultado completamente distinto. "),(0,r.kt)("h4",{id:"comentarios"},"Comentarios"),(0,r.kt)("p",null,"Los comentarios le indican al compilador que ignore su contenido. Permite realizar aclaraciones o deshabilitar c\xf3digo temporalmente. "),(0,r.kt)("p",null,"Para realizar un comentario en C# utilizamos la doble barra ",(0,r.kt)("inlineCode",{parentName:"p"},"//"),". Lo que siga a la doble barra ser\xe1 ignorado por el compilador hasta el fin de la l\xednea."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"// Falta descontar los aportes.\ndecimal sueldoNeto = sueldoBruto - impuestos;\n")),(0,r.kt)("p",null,"Si queremos escribir un comentario multi-l\xednea se utiliza ",(0,r.kt)("inlineCode",{parentName:"p"},"/*")," al inicio y ",(0,r.kt)("inlineCode",{parentName:"p"},"*/")," al final, todo el contenido entre esos dos s\xedmbolos ser\xe1 ignorado por el compilador. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'/* \n    Estamos en programaci\xf3n II de UTN Fra. \n\n    string saludo = "\xa1Hola Mundo!"\n    \n    Aprendemos a realizar comentarios en C#.\n*/\n')),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Informaci\xf3n")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"El atajo de teclado de Visual Studio para realizar comentarios es ",(0,r.kt)("inlineCode",{parentName:"p"},"CTRL + K + C"),", y para deshacerlos ",(0,r.kt)("inlineCode",{parentName:"p"},"CTRL + K + U"),". "))),(0,r.kt)("h4",{id:"bloques"},"Bloques"),(0,r.kt)("p",null,"En C# para escribir un bloque de c\xf3digo se utilizan llaves ",(0,r.kt)("inlineCode",{parentName:"p"},"{}"),". Si hacemos una comparaci\xf3n con el lenguaje humano, lo bloques ser\xedan an\xe1logos a los p\xe1rrafos. Los bloques empiezan con una declaraci\xf3n que define el contenido del bloque. "),(0,r.kt)("p",null,"En el siguiente ejemplo vemos que tenemos 3 bloques anidados. Uno definido por la palabra clave ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace"),", otro por ",(0,r.kt)("inlineCode",{parentName:"p"},"class")," y el \xfaltimo est\xe1 definido por la firma del ",(0,r.kt)("em",{parentName:"p"},"m\xe9todo")," (similar a un funci\xf3n)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using System; // El ; indica el fin de la declaraci\xf3n\n\n// 'namespace' define el tipo de bloque. 'Hola_Mundo' es un nombre o identificador para ese bloque. \nnamespace Hola_Mundo\n{ // La llave de apertura { indica el inicio de un bloque.\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\"); // Otra declaraci\xf3n.\n        }\n    }\n} // La llave de cierre } indica el fin de un bloque.\n")),(0,r.kt)("h3",{id:"vocabulario-de-c"},"Vocabulario de C#"),(0,r.kt)("p",null,"El vocabulario de C# est\xe1 compuesto de ",(0,r.kt)("strong",{parentName:"p"},"palabras clave (",(0,r.kt)("em",{parentName:"strong"},"keywords"),")"),", ",(0,r.kt)("strong",{parentName:"p"},"s\xedmbolos")," y ",(0,r.kt)("strong",{parentName:"p"},"tipos"),"."),(0,r.kt)("p",null,"Entre las palabras claves encontraremos ",(0,r.kt)("inlineCode",{parentName:"p"},"using"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"class"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"static"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"double"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"bool"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"switch"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"break"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"while"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"do"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"for"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"foreach")," y m\xe1s. "),(0,r.kt)("p",null,"Entre los s\xedmbolos trabajaremos con ",(0,r.kt)("inlineCode",{parentName:"p"},'"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"/"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"%"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"@"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$"),",entre otros."),(0,r.kt)("h4",{id:"m\xe9todos-los-verbos-de-c"},"M\xe9todos, los verbos de C#"),(0,r.kt)("p",null,"Los verbos en espa\xf1ol representan acciones como ",(0,r.kt)("em",{parentName:"p"},"correr"),", ",(0,r.kt)("em",{parentName:"p"},"jugar"),", ",(0,r.kt)("em",{parentName:"p"},"saltar"),". De la misma forma, los ",(0,r.kt)("strong",{parentName:"p"},"m\xe9todos")," en C# representan acciones que podr\xe1n ser ejecutadas por alguna parte del programa. Son similares a las funciones en otros lenguajes. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System; \n\nnamespace Hola_Mundo\n{ \n    class Program\n    {\n        // Ac\xe1 comienza la declaraci\xf3n del m\xe9todo Main.\n        static void Main(string[] args)\n        {\n            /* Ac\xe1 se invoca/llama al m\xe9todo WriteLine \n            y se le pasa como argumento (dato o valor de entrada) un string. \n            */\n            Console.WriteLine("Hello World!"); \n        }\n        // Ac\xe1 finaliza la declaraci\xf3n del m\xe9todo Main.\n    }\n} \n')),(0,r.kt)("h5",{id:"nombres-de-m\xe9todos"},"Nombres de m\xe9todos"),(0,r.kt)("p",null,"Los nombres de los m\xe9todos deben ser ",(0,r.kt)("em",{parentName:"p"},"verbos")," escritos con ",(0,r.kt)("strong",{parentName:"p"},"notaci\xf3n Pascal (",(0,r.kt)("em",{parentName:"strong"},"Pascal Case"),")"),". La notaci\xf3n Pascal, tambi\xe9n conocida como Upper Camel Case, indica que la primera letra de cada palabra dentro de un nombre compuesto debe estar en ma\xfduscula.  "),(0,r.kt)("p",null,"Ejemplos:\n",(0,r.kt)("em",{parentName:"p"},"MostrarDatos()"),"\n",(0,r.kt)("em",{parentName:"p"},"ConfirmarCompra()"),"\n",(0,r.kt)("em",{parentName:"p"},"RechazarPedido()"),"\n",(0,r.kt)("em",{parentName:"p"},"CancelarOperacion()")),(0,r.kt)("h5",{id:"m\xe9todo-main"},"M\xe9todo Main"),(0,r.kt)("p",null,"El m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"Main")," es el ",(0,r.kt)("strong",{parentName:"p"},"punto de entrada (entry point)")," de todos los programas en C#, es decir, el primer m\xe9todo en ejecutarse."),(0,r.kt)("p",null,"Analicemos su firma:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"static"),": Es un modificador que permite ejecutar un m\xe9todo sin tener que instanciar a una variable (sin crear un objeto). El m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"li"},"Main")," debe ser est\xe1tico. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"void"),": Indica el tipo retorno del m\xe9todo. ",(0,r.kt)("inlineCode",{parentName:"li"},"void")," se utiliza cuando el m\xe9todo no retorna ning\xfan valor. No necesariamente tiene que ser void, se puede especificar otro tipo de retorno."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"string[] args"),": Es un array de tipo ",(0,r.kt)("inlineCode",{parentName:"li"},"string"),". Si la aplicaci\xf3n de consola recibe argumentos para su ejecuci\xf3n, los valores estar\xe1n dentro de este array. Este par\xe1metro es opcional.")),(0,r.kt)("h4",{id:"tipos-atributos-y-variables-los-sustantivos-de-c"},"Tipos, atributos y variables. Los sustantivos de C#."),(0,r.kt)("p",null,"En espa\xf1ol los sustantivos son palabras que se utilizan para denominar seres, entidades u objetos. "),(0,r.kt)("p",null,"Por ejemplo, ",(0,r.kt)("em",{parentName:"p"},"Federico"),' es el nombre de un profesor. La palabra "profesor" nos indica el papel que juega ',(0,r.kt)("em",{parentName:"p"},"Fede")," dentro del contexto de la universidad. Podemos decir que ",(0,r.kt)("em",{parentName:"p"},"Fede")," es de tipo ",(0,r.kt)("inlineCode",{parentName:"p"},"Profesor"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"Profesor")," no es el \xfanico tipo dentro del contexto de la facultad, tambi\xe9n est\xe1n ",(0,r.kt)("inlineCode",{parentName:"p"},"Alumno"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Secretario"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Coordinador"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"LibretaUniversitaria"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Materia"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Aula"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Nota"),", entre otros. Los ",(0,r.kt)("strong",{parentName:"p"},"tipos")," son sustantivos que categorizan cosas. "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"legajoDocente")," y ",(0,r.kt)("inlineCode",{parentName:"p"},"antiguedad")," son caracter\xedsticas que forman parte de lo que describe a ",(0,r.kt)("em",{parentName:"p"},"Fede")," como profesor, son ",(0,r.kt)("strong",{parentName:"p"},"atributos"),"."),(0,r.kt)("p",null,"Por otra parte, ",(0,r.kt)("em",{parentName:"p"},"Fede")," no es el \xfanico ser de tipo ",(0,r.kt)("inlineCode",{parentName:"p"},"Profesor"),", tambi\xe9n est\xe1n ",(0,r.kt)("em",{parentName:"p"},"Lucas"),", ",(0,r.kt)("em",{parentName:"p"},"Ezequiel")," y ",(0,r.kt)("em",{parentName:"p"},"Mauricio"),". Cada uno de estos seres o manifestaciones concretas de un tipo son ",(0,r.kt)("strong",{parentName:"p"},"variables"),", sustantivos que se refieren a una cosa espec\xedfica.  "),(0,r.kt)("h2",{id:"trabajando-con-variables"},"Trabajando con variables"),(0,r.kt)("p",null,"Todas las aplicaciones procesan datos de alg\xfan tipo. El origen de los datos puede ser variado y pueden ser almacenados temporalmente en la memoria asignada al programa en ejecuci\xf3n. Cuando el programa finaliza se pierden los datos en memoria. "),(0,r.kt)("p",null,"Las variables se utilizan para almacenar los datos en memoria y as\xed poder procesarlos. "),(0,r.kt)("p",null,"En C# debemos definir un tipo de dato apropiado a la hora de declarar variables. El tipo de dato definir\xe1 un conjunto de m\xe9todos y atributos para trabajar con ese valor, as\xed como el tama\xf1o que podr\xe1 ocupar el valor en la memoria."),(0,r.kt)("p",null,"Las variables locales, es decir aquellas declaradas dentro de m\xe9todos, existen s\xf3lo durante la ejecuci\xf3n de ese m\xe9todo. Si se trata de tipos de valor, la memoria es liberada inmediatamente al abandonar el m\xe9todo. Si se trata de tipos de referencia depender\xe1n del proceso de ",(0,r.kt)("em",{parentName:"p"},"garbage collection"),". "),(0,r.kt)("p",null,"Para declarar una variable se debe colocar el tipo de dato seguido de un identificador (nombre):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"string nombre;\nint horasAsignadas;\n")),(0,r.kt)("h3",{id:"operadores-de-asignaci\xf3n"},"Operadores de asignaci\xf3n"),(0,r.kt)("p",null,"Para asignar un valor a la variable se utiliza el operador de asignaci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"="),". Lo que est\xe1 a la derecha del operador se lee y almacena en la variable de la izquierda."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'string nombre = "Lautaro";\nint horasTrabajadas = 8;\nint precioPorHora = 100;\nint costoTrabajo = horasTrabajadas * precioPorHora;\n\nConsole.WriteLine("{0} trabaj\xf3 {1} horas. El costo por el trabajo es de ${2}.", nombre, horasTrabajadas, costoTrabajo);\n')),(0,r.kt)("p",null,"La salida del c\xf3digo anterior es:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Lautaro trabaj\xf3 8 horas. El costo por el trabajo es de $800.\n")),(0,r.kt)("h3",{id:"constantes"},"Constantes"),(0,r.kt)("p",null,"Las ",(0,r.kt)("strong",{parentName:"p"},"constantes")," representan valores ",(0,r.kt)("em",{parentName:"p"},"inmutables"),", es decir que sus valores se definen en tiempo de compilaci\xf3n y no cambian durante el resto de la vida del programa."),(0,r.kt)("p",null,"Se declaran antecediendo el modificador ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," al tipo de dato y al identificador de la constante."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'const decimal IVA = 0.21M;\n\ndecimal precioBruto = 100M;\ndecimal precioNeto = precioBruto + precioBruto * IVA;\n\nConsole.WriteLine("El precio bruto es {0} y aplicando IVA queda en {1}.", precioBruto, precioNeto);\n')),(0,r.kt)("p",null,"La salida del c\xf3digo anterior es:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"El precio bruto es 100 y aplicando IVA queda en 121,00.\n")),(0,r.kt)("h3",{id:"nombres-de-variables-y-atributos"},"Nombres de variables y atributos"),(0,r.kt)("p",null,"Los nombres de las variables y atributos deben ser ",(0,r.kt)("em",{parentName:"p"},"sustantivos")," escritos con ",(0,r.kt)("strong",{parentName:"p"},"notaci\xf3n Camel (",(0,r.kt)("em",{parentName:"strong"},"Camel Case"),")"),". La notaci\xf3n Camel, tambi\xe9n conocida como Lower Camel Case, indica que la primera letra de un nombre va en min\xfascula y luego cada palabra adicional debe empezar en may\xfascula.  "),(0,r.kt)("p",null,"Ejemplos:\n",(0,r.kt)("em",{parentName:"p"},"edad"),"\n",(0,r.kt)("em",{parentName:"p"},"resultado"),"\n",(0,r.kt)("em",{parentName:"p"},"valorMaximo"),"\n",(0,r.kt)("em",{parentName:"p"},"cotizacionUsdArs"),"\n",(0,r.kt)("em",{parentName:"p"},"materiasAsignadas"),"\n",(0,r.kt)("em",{parentName:"p"},"numerosPrimos")),(0,r.kt)("h4",{id:"operador-nameof"},"Operador nameof"),(0,r.kt)("p",null,"El operador ",(0,r.kt)("inlineCode",{parentName:"p"},"nameof()")," retorna el nombre de una variable, tipo o atributo como una cadena de texto. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'string nombre = "Lautaro";\n\nConsole.WriteLine("La variable {0} contiene el valor {1}.", nameof(nombre), nombre);\n')),(0,r.kt)("p",null,"La salida del c\xf3digo anterior es:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"La variable nombre contiene el valor Lautaro.\n")))}m.isMDXComponent=!0}}]);