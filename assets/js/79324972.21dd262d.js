"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[4031],{3905:function(e,n,a){a.d(n,{Zo:function(){return m},kt:function(){return u}});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=t.createContext({}),p=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},m=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(a),u=r,v=c["".concat(l,".").concat(u)]||c[u]||d[u]||i;return a?t.createElement(v,o(o({ref:n},m),{},{components:a})):t.createElement(v,o({ref:n},m))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},6737:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return m},default:function(){return c}});var t=a(7462),r=a(3366),i=(a(7294),a(3905)),o=["components"],s={title:"Apuntes - Archivos y serializaci\xf3n",sidebar_label:"Ambientes y sistemas de archivos",slug:"/clases/serializacion/apuntes/ambientes-sistemas-archivos",hide_table_of_contents:!1,hide_title:!1,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},l=void 0,p={unversionedId:"clases/serializacion/Apuntes/ambientes-sistemas-archivos",id:"clases/serializacion/Apuntes/ambientes-sistemas-archivos",isDocsHomePage:!1,title:"Apuntes - Archivos y serializaci\xf3n",description:"Trabajando con ambientes y sistemas de archivos multi-plataforma",source:"@site/docs/clases/14-serializacion/Apuntes/00-ambientes-sistemas-archivos.md",sourceDirName:"clases/14-serializacion/Apuntes",slug:"/clases/serializacion/apuntes/ambientes-sistemas-archivos",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/serializacion/apuntes/ambientes-sistemas-archivos",tags:[],version:"current",lastUpdatedBy:"mauriciocerizza",lastUpdatedAt:1632711086,formattedLastUpdatedAt:"9/26/2021",sidebarPosition:0,frontMatter:{title:"Apuntes - Archivos y serializaci\xf3n",sidebar_label:"Ambientes y sistemas de archivos",slug:"/clases/serializacion/apuntes/ambientes-sistemas-archivos",hide_table_of_contents:!1,hide_title:!1,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"}},m=[{value:"Trabajando con ambientes y sistemas de archivos multi-plataforma",id:"trabajando-con-ambientes-y-sistemas-de-archivos-multi-plataforma",children:[{value:"Obtener informaci\xf3n del sistema operativo",id:"obtener-informaci\xf3n-del-sistema-operativo",children:[]},{value:"Obtener el directorio actual",id:"obtener-el-directorio-actual",children:[]},{value:"Obtener los caracteres de separaci\xf3n de rutas y directorios",id:"obtener-los-caracteres-de-separaci\xf3n-de-rutas-y-directorios",children:[]},{value:"Obtener los directorios especiales del sistema operativo",id:"obtener-los-directorios-especiales-del-sistema-operativo",children:[]}]},{value:"Trabajando con unidades de almacenamiento",id:"trabajando-con-unidades-de-almacenamiento",children:[]}],d={toc:m};function c(e){var n=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"trabajando-con-ambientes-y-sistemas-de-archivos-multi-plataforma"},"Trabajando con ambientes y sistemas de archivos multi-plataforma"),(0,i.kt)("p",null,"Como sabemos, .NET es una plataforma de desarrollo multi-plataforma donde podemos construir soluciones para Windows, Linux o MacOS. Cada sistema operativo tiene sus diferencias en c\xf3mo se almacenan y recuperan los datos, es decir, en su ",(0,i.kt)("strong",{parentName:"p"},"sistema de archivos (",(0,i.kt)("em",{parentName:"strong"},"fyle system"),")"),". "),(0,i.kt)("p",null,"Por fortuna, la ",(0,i.kt)("em",{parentName:"p"},"base class library")," en los namespaces ",(0,i.kt)("inlineCode",{parentName:"p"},"System")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"System.IO")," cuenta con herramientas que nos facilitar\xe1n el manejo de las particularidades de cada ambiente."),(0,i.kt)("h3",{id:"obtener-informaci\xf3n-del-sistema-operativo"},"Obtener informaci\xf3n del sistema operativo"),(0,i.kt)("p",null,"\xbfC\xf3mo podemos saber en tiempo de ejecuci\xf3n sobre qu\xe9 sistema operativo est\xe1 corriendo nuestra aplicaci\xf3n? Para esto existen una serie de m\xe9todos est\xe1ticos de la clase ",(0,i.kt)("inlineCode",{parentName:"p"},"OperatingSystem"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"IsWindows"),": Retorna verdadero si el sistema operativo es Windows. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"IsLinux"),": Retorna verdadero si el sistema operativo es Linux. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"IsMacOS"),": Retorna verdadero si el sistema operativo es MacOS. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"IsIOS"),": Retorna verdadero si el sistema operativo es IOS. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"IsAndroid"),": Retorna verdadero si el sistema operativo es Android. ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nnamespace Vista_Archivos\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {          \n            Console.WriteLine("\xbfEs Windows?: {0}", OperatingSystem.IsWindows());\n            Console.WriteLine("\xbfEs Linux?: {0}", OperatingSystem.IsLinux());\n            Console.WriteLine("\xbfEs MacOS?: {0}", OperatingSystem.IsMacOS());\n            Console.WriteLine("\xbfEs IOS?: {0}", OperatingSystem.IsIOS());\n            Console.WriteLine("\xbfEs Android?: {0}", OperatingSystem.IsAndroid());\n        }\n    }\n}\n')),(0,i.kt)("p",null,"La salida en Windows es:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\xbfEs Windows?: True\n\xbfEs Linux?: False\n\xbfEs MacOS?: False\n\xbfEs IOS?: False\n\xbfEs Android?: False\n")),(0,i.kt)("p",null,"La salida en Linux es:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\xbfEs Windows?: False\n\xbfEs Linux?: True\n\xbfEs MacOS?: False\n\xbfEs IOS?: False\n\xbfEs Android?: False\n")),(0,i.kt)("p",null,"La propiedad est\xe1tica ",(0,i.kt)("inlineCode",{parentName:"p"},"OSVersion")," de la clase ",(0,i.kt)("inlineCode",{parentName:"p"},"Environment")," nos retorna un objeto de tipo ",(0,i.kt)("inlineCode",{parentName:"p"},"OperatingSystem")," con las siguientes propiedades:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Platform"),": Retorna un valor del enumerado ",(0,i.kt)("inlineCode",{parentName:"p"},"PlatformID")," indicando sobre qu\xe9 sistema operativo se est\xe1 ejecutando la aplicaci\xf3n. Los valores posibles son: "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Win32NT"),": El sistema operativo es Windows NT o superior. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Unix"),": El sistema operativo es Unix (MacOSX, Linux). "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Other"),": Es alg\xfan otro sistema operativo."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Version"),": Retorna un objeto de tipo ",(0,i.kt)("inlineCode",{parentName:"p"},"Version")," que contiene informaci\xf3n sobre la versi\xf3n del sistema operativo sobre la que se est\xe1 ejecutando la aplicaci\xf3n."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nnamespace Vista_Archivos\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {          \n            Console.WriteLine("OSVersion: {0}", Environment.OSVersion);\n            Console.WriteLine("OSVersion.Platform: {0}", Environment.OSVersion.Platform);\n            Console.WriteLine("OSVersion.Version: {0}", Environment.OSVersion.Version);\n        }\n    }\n}\n')),(0,i.kt)("p",null,"La salida en Windows es:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"OSVersion: Microsoft Windows NT 10.0.22000.0\nOSVersion.Platform: Win32NT\nOSVersion.Version: 10.0.22000.0\n")),(0,i.kt)("p",null,"La salida en Linux es:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"OSVersion: Unix 5.10.43.3\nOSVersion.Platform: Unix\nOSVersion.Version: 5.10.43.3\n")),(0,i.kt)("p",null,"Existen algunos m\xe9todos est\xe1ticos de la clase ",(0,i.kt)("inlineCode",{parentName:"p"},"Environment")," que nos aportan informaci\xf3n adicional:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Is64BitOperatingSystem"),": Indica si el sistema operativo sobre el que se ejecuta la aplicaci\xf3n es de 64 bits."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ProcessorCount"),": Retorna un entero con el n\xfamero de procesadores ",(0,i.kt)("strong",{parentName:"li"},"l\xf3gicos")," de la m\xe1quina sobre la que se ejecuta la aplicaci\xf3n."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UserName"),": Para obtener el nombre del usuario del sistema operativo que est\xe1 ejecutando la aplicaci\xf3n."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NewLine"),": Retorna el caracter de salto de l\xednea correspondiente al sistema operativo sobre el que se ejecuta la aplicaci\xf3n.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nnamespace Vista_Archivos\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine("ProcessorCount: {0}", Environment.ProcessorCount);\n            Console.WriteLine("ProcessorCount: {0}", Environment.Is64BitOperatingSystem);\n            Console.WriteLine("ProcessorCount: {0}", Environment.UserName);\n            Console.WriteLine("Primera l\xednea {0} Segunda L\xednea", Environment.NewLine);\n        }\n    }\n}\n')),(0,i.kt)("p",null,"La salida en Windows es:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"ProcessorCount: 12\nProcessorCount: True\nProcessorCount: mauri\nPrimera l\xednea\n Segunda Linea\n")),(0,i.kt)("p",null,"La salida en Linux es:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"ProcessorCount: 12\nProcessorCount: True\nProcessorCount: mcerizza\nPrimera l\xednea \n Segunda L\xednea\n")),(0,i.kt)("h3",{id:"obtener-el-directorio-actual"},"Obtener el directorio actual"),(0,i.kt)("p",null,"Existen dos formas de obtener el directorio actual:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El m\xe9todo est\xe1tico ",(0,i.kt)("inlineCode",{parentName:"li"},"GetCurrentDirectory()")," de la clase ",(0,i.kt)("inlineCode",{parentName:"li"},"Directory"),"."),(0,i.kt)("li",{parentName:"ul"},"La propiedad est\xe1tica ",(0,i.kt)("inlineCode",{parentName:"li"},"CurrentDirectory")," de la clase ",(0,i.kt)("inlineCode",{parentName:"li"},"Environment"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.IO;\n\nnamespace Vista_Archivos\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {            \n            Console.WriteLine("GetCurrentDirectory(): {0}", Directory.GetCurrentDirectory());\n            Console.WriteLine("Separador de directorios: {0}", Environment.CurrentDirectory);\n        }\n    }\n}\n')),(0,i.kt)("p",null,"La salida en Windows es:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Directory.GetCurrentDirectory(): C:\\Users\\mauri\\Desktop\\Archivos\\Vista-Archivos\nEnvironment.CurrentDirectory: C:\\Users\\mauri\\Desktop\\Archivos\\Vista-Archivos\n")),(0,i.kt)("p",null,"La salida en Linux es:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Directory.GetCurrentDirectory(): /home/mcerizza/Ejemplos/Archivos/Vista-Archivos\nEnvironment.CurrentDirectory: /home/mcerizza/Ejemplos/Archivos/Vista-Archivos\n")),(0,i.kt)("h3",{id:"obtener-los-caracteres-de-separaci\xf3n-de-rutas-y-directorios"},"Obtener los caracteres de separaci\xf3n de rutas y directorios"),(0,i.kt)("p",null,"Para obtener el caracter separador de rutas (paths) podemos usar la propiedad est\xe1tica ",(0,i.kt)("inlineCode",{parentName:"p"},"PathSeparator")," de la clase ",(0,i.kt)("inlineCode",{parentName:"p"},"Path"),"."),(0,i.kt)("p",null,"Para obtener el caracter separador de directorios podemos usar la propiedad est\xe1tica ",(0,i.kt)("inlineCode",{parentName:"p"},"DirectorySeparatorChar")," de la clase ",(0,i.kt)("inlineCode",{parentName:"p"},"Path"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.IO;\n\nnamespace Vista_Archivos\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {            \n            Console.WriteLine("Path.PathSeparator: {0}", Path.PathSeparator);\n            Console.WriteLine("Path.DirectorySeparatorChar: {0}", Path.DirectorySeparatorChar);\n        }\n    }\n}\n')),(0,i.kt)("p",null,"La salida en Windows es:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Path.PathSeparator: ;\nPath.DirectorySeparatorChar: \\\n")),(0,i.kt)("p",null,"La salida en Linux es:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Path.PathSeparator: :\nPath.DirectorySeparatorChar: /\n")),(0,i.kt)("h3",{id:"obtener-los-directorios-especiales-del-sistema-operativo"},"Obtener los directorios especiales del sistema operativo"),(0,i.kt)("p",null,"Para obtener el directorio del sistema podemos usar la propiedad est\xe1tica ",(0,i.kt)("inlineCode",{parentName:"p"},"SystemDirectory")," de la clase ",(0,i.kt)("inlineCode",{parentName:"p"},"Environment"),"."),(0,i.kt)("p",null,"Para obtener el directorio de archivos temporales podemos usar el m\xe9todo est\xe1tico ",(0,i.kt)("inlineCode",{parentName:"p"},"GetTempPath()")," de la clase ",(0,i.kt)("inlineCode",{parentName:"p"},"Path"),"."),(0,i.kt)("p",null,"Para obtener otros directorios especiales (documentos, escritorio, personal) existe el m\xe9todo est\xe1tico ",(0,i.kt)("inlineCode",{parentName:"p"},"GetFolderPath()")," de la clase ",(0,i.kt)("inlineCode",{parentName:"p"},"Environment")," al que le podemos pasar un valor del enumerado ",(0,i.kt)("inlineCode",{parentName:"p"},"SpecialFolder"),"."),(0,i.kt)("p",null,"Entre las opciones de ",(0,i.kt)("inlineCode",{parentName:"p"},"SpecialFolder")," encontraremos:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Environment.SpecialFolder.System"),": Otra forma de obtener el directorio del sistema, igual a ",(0,i.kt)("inlineCode",{parentName:"li"},"Environment.SystemDirectory"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Environment.SpecialFolder.Desktop"),": La ruta correspondiente al escritorio."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Environment.SpecialFolder.ProgramFiles"),": El directorio de instalaci\xf3n de programas destinados a arquitectura no-X86."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Environment.SpecialFolder.ProgramFilesX86"),": El directorio de instalaci\xf3n de programas destinados a arquitectura X86."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Environment.SpecialFolder.MyDocuments"),": El directorio de la carpeta personal del usuario (Mis Documentos en Windows)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Environment.SpecialFolder.ApplicationData"),": El directorio com\xfan para almacenar datos de aplicaciones del usuario actual."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Environment.SpecialFolder.UserProfile"),": El directorio del perfil de usuario actual."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/api/system.environment.specialfolder?view=net-5.0"},"\xa1Y hay m\xe1s!"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.IO;\n\nnamespace Archivos_Vista\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine("Environment.SystemDirectory: {0}", Environment.SystemDirectory);\n            Console.WriteLine("Path.GetTempPath: {0}", Path.GetTempPath());\n\n            Console.WriteLine("Environment.GetFolderPath(Environment.SpecialFolder.System): {0}", Environment.GetFolderPath(Environment.SpecialFolder.System));\n            Console.WriteLine("Environment.GetFolderPath(Environment.SpecialFolder.Desktop): {0}", Environment.GetFolderPath(Environment.SpecialFolder.Desktop));\n            Console.WriteLine("Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles): {0}", Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles));\n            Console.WriteLine("Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86): {0}", Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86));\n            Console.WriteLine("Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments): {0}", Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));\n            Console.WriteLine("Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData): {0}", Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));\n            Console.WriteLine("Environment.GetFolderPath(Environment.SpecialFolder.UserProfile): {0}", Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));\n        }\n    }\n}\n')),(0,i.kt)("p",null,"La salida en Windows es:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Environment.SystemDirectory: C:\\WINDOWS\\system32\nPath.GetTempPath: C:\\Users\\mauri\\AppData\\Local\\Temp\\\nEnvironment.GetFolderPath(Environment.SpecialFolder.System): C:\\WINDOWS\\system32\nEnvironment.GetFolderPath(Environment.SpecialFolder.Desktop): C:\\Users\\mauri\\Desktop\nEnvironment.GetFolderPath(Environment.SpecialFolder.ProgramFiles): C:\\Program Files\nEnvironment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86): C:\\Program Files (x86)\nEnvironment.GetFolderPath(Environment.SpecialFolder.MyDocuments): C:\\Users\\mauri\\Documents\nEnvironment.GetFolderPath(Environment.SpecialFolder.ApplicationData): C:\\Users\\mauri\\AppData\\Roaming\nEnvironment.GetFolderPath(Environment.SpecialFolder.UserProfile): C:\\Users\\mauri\n")),(0,i.kt)("p",null,"Algunas opciones s\xf3lo funcionan en Windows, como se puede ver en la siguiente salida en Linux:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Environment.SystemDirectory: \nPath.GetTempPath: /tmp/\nEnvironment.GetFolderPath(Environment.SpecialFolder.System): \nEnvironment.GetFolderPath(Environment.SpecialFolder.Desktop): \nEnvironment.GetFolderPath(Environment.SpecialFolder.ProgramFiles): \nEnvironment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86): \nEnvironment.GetFolderPath(Environment.SpecialFolder.MyDocuments): /home/mcerizza\nEnvironment.GetFolderPath(Environment.SpecialFolder.ApplicationData): \nEnvironment.GetFolderPath(Environment.SpecialFolder.UserProfile): /home/mcerizza\n")),(0,i.kt)("h2",{id:"trabajando-con-unidades-de-almacenamiento"},"Trabajando con unidades de almacenamiento"),(0,i.kt)("p",null,"La clase ",(0,i.kt)("inlineCode",{parentName:"p"},"DriveInfo")," nos proporcionar\xe1 informaci\xf3n sobre las unidades de almacenamiento conectadas a la computadora. "),(0,i.kt)("p",null,"Con el m\xe9todo est\xe1tico ",(0,i.kt)("inlineCode",{parentName:"p"},"GetDrives")," podemos obtener un array de objetos de tipo ",(0,i.kt)("inlineCode",{parentName:"p"},"DriveInfo")," que representan a cada una de las unidades de almacenamiento detectadas por el sistema operativo. Cada uno de estos objetos nos permitir\xe1 consultar las siguientes propiedades:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Name"),": Nombre de la unidad."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DriveType"),": Nombre del tipo de unidad (fija, removible, cd rom, etc)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DriveFormat"),": Formato de la unidad."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TotalSize"),": Tama\xf1o total en bytes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AvailableFreeSpace"),": Espacio libre en bytes.")),(0,i.kt)("p",null,"Es importante que antes de usar algunas propiedades nos aseguremos que la unidad est\xe9 lista con la propiedad ",(0,i.kt)("inlineCode",{parentName:"p"},"IsReady"),". Esto es particularmente relevante para unidades removibles, ya que en caso de no estar lista se lanzar\xe1 una excepci\xf3n en tiempo de ejecuci\xf3n. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.IO;\nusing System;\n\nnamespace Vista_Archivos\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine("{0, -10} | {1, -10} | {2, -7} | {3, -26} | {4, -26} |", \n            "Nombre", "Tipo", "Formato", "Tama\xf1o", "Espacio libre");\n            \n            foreach (DriveInfo unidad in DriveInfo.GetDrives())\n            {\n                if (unidad.IsReady)\n                {\n                    Console.WriteLine("{0, -10} | {1, -10} | {2, -7} | {3, 20:N0} bytes | {4, 20:N0} bytes |", \n                    unidad.Name, unidad.DriveType, unidad.DriveFormat, unidad.TotalSize, \n                    unidad.AvailableFreeSpace);\n                }\n                else\n                {\n                    Console.WriteLine("{0, -10} | {1, -10}", unidad.Name, unidad.DriveType);\n                }\n            }\n        }\n    }\n}\n')),(0,i.kt)("p",null,"La salida del c\xf3digo anterior es:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Nombre     | Tipo       | Formato | Tama\xf1o                     | Espacio libre              |\nC:\\        | Fixed      | NTFS    |      510.824.280.064 bytes |      272.604.942.336 bytes |\nD:\\        | Removable  | FAT     |          126.054.400 bytes |           33.855.488 bytes |\nG:\\        | Fixed      | FAT32   |       16.106.127.360 bytes |          863.588.352 bytes |\nH:\\        | Fixed      | FAT32   |      510.824.280.064 bytes |      258.974.691.328 bytes |\nJ:\\        | Fixed      | NTFS    |    1.024.191.361.024 bytes |      520.692.162.560 bytes |\nK:\\        | Fixed      | NTFS    |    1.000.199.942.144 bytes |      600.995.758.080 bytes |\n")))}c.isMDXComponent=!0}}]);