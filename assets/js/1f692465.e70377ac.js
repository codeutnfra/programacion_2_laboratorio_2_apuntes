"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[7621],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return d}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),c=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),d=n,b=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return a?r.createElement(b,l(l({ref:t},p),{},{components:a})):r.createElement(b,l({ref:t},p))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var c=2;c<o;c++)l[c]=a[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2555:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var r=a(7462),n=a(3366),o=(a(7294),a(3905)),l=["components"],s={title:"Cuestionario - Polimorfismo y clases abstractas",sidebar_label:"Cuestionario",slug:"/clases/polimorfismo/apuntes/cuestionario",hide_table_of_contents:!0,hide_title:!1,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},i=void 0,c={unversionedId:"clases/polimorfismo/Apuntes/cuestionario",id:"clases/polimorfismo/Apuntes/cuestionario",title:"Cuestionario - Polimorfismo y clases abstractas",description:"Polimorfismo",source:"@site/docs/clases/09-polimorfismo/Apuntes/cuestionario.md",sourceDirName:"clases/09-polimorfismo/Apuntes",slug:"/clases/polimorfismo/apuntes/cuestionario",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/polimorfismo/apuntes/cuestionario",tags:[],version:"current",lastUpdatedBy:"mauriciocerizza",lastUpdatedAt:1631942816,formattedLastUpdatedAt:"9/18/2021",frontMatter:{title:"Cuestionario - Polimorfismo y clases abstractas",sidebar_label:"Cuestionario",slug:"/clases/polimorfismo/apuntes/cuestionario",hide_table_of_contents:!0,hide_title:!1,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},sidebar:"Clases",previous:{title:"Clases abstractas",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/polimorfismo/apuntes/abstract"},next:{title:"I01 - Sobre-sobrescribiendo esas advertencias",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/polimorfismo/Ejercicios/I01-sobre-sobrescribiendo-esas-advertencias"}},p={},m=[{value:"Polimorfismo",id:"polimorfismo",level:3},{value:"Clases y miembros abstractos",id:"clases-y-miembros-abstractos",level:3}],u={toc:m};function d(e){var t=e.components,a=(0,n.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"polimorfismo"},"Polimorfismo"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\xbfD\xf3nde reside la definici\xf3n del m\xe9todo a sobrescribir? \xbfQu\xe9 palabra clave se usa para definirlo?"),(0,o.kt)("li",{parentName:"ol"},"\xbfD\xf3nde reside la implementaci\xf3n del m\xe9todo sobrescrito? \xbfQu\xe9 palabra clave se usa para implementarlo?"),(0,o.kt)("li",{parentName:"ol"},"\xbfLa invocaci\xf3n de los m\xe9todos sobrescritos (override) se resuelve en tiempo de compilaci\xf3n o ejecuci\xf3n? \xbfY la de los m\xe9todos sobrecargados (overload)?"),(0,o.kt)("li",{parentName:"ol"},"\xbfCambia la firma de los m\xe9todos cuando los sobrescribimos (override)? \xbfY cuando los sobrecargamos (overload)?"),(0,o.kt)("li",{parentName:"ol"},"\xbfLos m\xe9todos sobrescritos (override) se encuentran en la misma clase? \xbfY los m\xe9todos sobrecargados (overload)?\xbfQu\xe9 es el polimorfismo en el contexto de la programaci\xf3n orientada a objetos?"),(0,o.kt)("li",{parentName:"ol"},"\xbfTodos los objetos en C# son polim\xf3rficos? \xbfPor qu\xe9?"),(0,o.kt)("li",{parentName:"ol"},"Seg\xfan el siguiente c\xf3digo, complete la tabla indicando:",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"El tipo de la referencia (Persona o Profesor)."),(0,o.kt)("li",{parentName:"ol"},"El tipo del objeto en tiempo de ejecuci\xf3n (Persona o Profesor)."),(0,o.kt)("li",{parentName:"ol"},"La salida por consola.")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'public class Persona \n{\n    public virtual string Teach() \n    {\n        return "Una persona puede ense\xf1ar.";\n    }\n}\n\npublic class Profesor : Persona \n{\n    public override string Teach() \n    {\n        return "Un profesor puede ense\xf1ar en un colegio.";\n    }\n}\n\npublic class Program \n{\n    public static void Main(string[] args)\n    {\n        // Caso 1\n        Persona persona = new Persona();\n        Console.WriteLine(persona.Teach());\n\n        // Caso 2\n        Persona otraPersona = new Profesor();\n        Console.WriteLine(persona.Teach());\n        \n        // Caso 3\n        Profesor profesor = new Profesor();\n        Console.WriteLine(persona.Teach());\n    }\n}\n')),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Objeto"),(0,o.kt)("th",{parentName:"tr",align:null},"Tipo de la referencia"),(0,o.kt)("th",{parentName:"tr",align:null},"Tipo de la instancia en tiempo de ejecuci\xf3n"),(0,o.kt)("th",{parentName:"tr",align:null},"Texto de la salida por consola"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("em",{parentName:"strong"},"persona"))),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("em",{parentName:"strong"},"otraPersona"))),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("em",{parentName:"strong"},"profesor"))),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h3",{id:"clases-y-miembros-abstractos"},"Clases y miembros abstractos"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\xbfQu\xe9 modificador debo utilizar si quiero declarar un m\xe9todo que ",(0,o.kt)("strong",{parentName:"li"},"pueda")," ser sobrescrito en las clases derivadas?"),(0,o.kt)("li",{parentName:"ol"},"\xbfQu\xe9 modificador debo utilizar si quiero declarar un m\xe9todo que ",(0,o.kt)("strong",{parentName:"li"},"deba")," ser sobrescrito en las clases derivadas?"),(0,o.kt)("li",{parentName:"ol"},"\xbfQu\xe9 es una clase abstracta? \xbfCu\xe1l es su funci\xf3n?"),(0,o.kt)("li",{parentName:"ol"},"Las clases ",(0,o.kt)("strong",{parentName:"li"},"no-abstractas")," que derivan de una clase abstracta, \xbfdeben implementar todos sus m\xe9todos abstractos? \xbfPor qu\xe9?"),(0,o.kt)("li",{parentName:"ol"},"Las clases ",(0,o.kt)("strong",{parentName:"li"},"abstractas")," que derivan de una clase abstracta, \xbfdeben implementar todos sus m\xe9todos abstractos? \xbfPor qu\xe9?"),(0,o.kt)("li",{parentName:"ol"},"\xbfSe pueden declarar miembros abstractos en clases ",(0,o.kt)("strong",{parentName:"li"},"no-abstractas"),"? \xbfPor qu\xe9?"),(0,o.kt)("li",{parentName:"ol"},"\xbfPara sobrescribir un m\xe9todo se debe heredar de una clase abstracta? \xbfPor qu\xe9?"),(0,o.kt)("li",{parentName:"ol"},"Marque los campos de la siguiente tabla con S\xcd o NO seg\xfan si la afirmaci\xf3n es verdadera para el tipo de clase:")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Tipo de clase"),(0,o.kt)("th",{parentName:"tr",align:null},"Puede heredar de otras clases (ser derivada)"),(0,o.kt)("th",{parentName:"tr",align:null},"Puede heredarse de ella (ser base)"),(0,o.kt)("th",{parentName:"tr",align:null},"Puede instanciarse"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Clase normal (sin modificadores)")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Clase abstracta (abstract)")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Clase sellada (sealed)")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Clase est\xe1tica (static)")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})))))}d.isMDXComponent=!0}}]);