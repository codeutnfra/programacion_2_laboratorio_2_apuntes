"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[7343],{3905:function(e,a,n){n.d(a,{Zo:function(){return p},kt:function(){return m}});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),d=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},p=function(e){var a=d(e.components);return t.createElement(i.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},c=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=r,b=c["".concat(i,".").concat(m)]||c[m]||u[m]||o;return n?t.createElement(b,s(s({ref:a},p),{},{components:n})):t.createElement(b,s({ref:a},p))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=c;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var d=2;d<o;d++)s[d]=n[d];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2536:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return l},metadata:function(){return i},toc:function(){return d},default:function(){return u}});var t=n(7462),r=n(3366),o=(n(7294),n(3905)),s=["components"],l={title:"Apuntes - Delegados y expresiones lambda",sidebar_label:"Expresiones lambda",slug:"/clases/delegados/apuntes/expresiones-lambda",hide_table_of_contents:!1,hide_title:!0,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},i={unversionedId:"clases/delegados/Apuntes/expresiones-lambda",id:"clases/delegados/Apuntes/expresiones-lambda",isDocsHomePage:!1,title:"Apuntes - Delegados y expresiones lambda",description:"Expresiones lambda",source:"@site/docs/clases/18-delegados/Apuntes/01-expresiones-lambda.md",sourceDirName:"clases/18-delegados/Apuntes",slug:"/clases/delegados/apuntes/expresiones-lambda",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/delegados/apuntes/expresiones-lambda",version:"current",lastUpdatedBy:"mauriciocerizza",lastUpdatedAt:1635274986,formattedLastUpdatedAt:"10/26/2021",sidebar_label:"Expresiones lambda",sidebarPosition:1,frontMatter:{title:"Apuntes - Delegados y expresiones lambda",sidebar_label:"Expresiones lambda",slug:"/clases/delegados/apuntes/expresiones-lambda",hide_table_of_contents:!1,hide_title:!0,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},sidebar:"Clases",previous:{title:"Apuntes - Delegados y expresiones lambda",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/delegados/apuntes/delegados"},next:{title:"Cuestionario - Delegados y expresiones lambda",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/delegados/apuntes/cuestionario"}},d=[{value:"Expresiones lambda",id:"expresiones-lambda",children:[{value:"Delegados y expresiones lambda",id:"delegados-y-expresiones-lambda",children:[]}]}],p={toc:d};function u(e){var a=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"expresiones-lambda"},"Expresiones lambda"),(0,o.kt)("p",null,"Las expresiones lambda se utilizan para crear funciones an\xf3nimas. Una funci\xf3n an\xf3nima es una funci\xf3n que no tiene nombre. Normalmente se utilizan como argumentos de m\xe9todos que tienen delegados como par\xe1metros de entrada."),(0,o.kt)("p",null,"El ",(0,o.kt)("strong",{parentName:"p"},"operador lambda ",(0,o.kt)("inlineCode",{parentName:"strong"},"=>"))," se utiliza para separar la lista de par\xe1metros del cuerpo del m\xe9todo an\xf3nimo. Los par\xe1metros de entrada van a la izquierda del operador lambda y la sentencia o bloque de instrucciones al otro lado."),(0,o.kt)("p",null,"Cuando el cuerpo del m\xe9todo se compone de una sola sentencia, se denomina ",(0,o.kt)("strong",{parentName:"p"},"expresi\xf3n lambda (",(0,o.kt)("em",{parentName:"strong"},"lambda expression"),")")," y no lleva llaves. "),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"(par\xe1metros de entrada) => expresi\xf3n")),(0,o.kt)("p",null,"Cuando el cuerpo del m\xe9todo es un bloque con una secuencia de sentencias, se denomina ",(0,o.kt)("strong",{parentName:"p"},"instrucci\xf3n lambda (",(0,o.kt)("em",{parentName:"strong"},"lambda statement"),")"),". Normalmente no contienen m\xe1s de dos o tres sentencias, siempre que se trabaja con esta herramienta se trata de m\xe9todos peque\xf1os y concretos. "),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"(par\xe1metros de entrada) => { secuencia de sentencias }")),(0,o.kt)("h3",{id:"delegados-y-expresiones-lambda"},"Delegados y expresiones lambda"),(0,o.kt)("p",null,"Las expresiones lambda pueden ser convertidas a un tipo delegado. El tipo delegado deber\xe1 coincidir con los par\xe1metros y el tipo de retorno de la expresi\xf3n. "),(0,o.kt)("p",null,"If a lambda expression doesn't return a value, it can be converted to one of the Action delegate types; otherwise, it can be converted to one of the Func delegate types."),(0,o.kt)("p",null,"En el siguiente ejemplo, la expresi\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"x => x * x"),", especifica un par\xe1metro llamado ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," y retorna el dicho valor elevado al cuadrado:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"Func<int, int> elevarAlCuadrado = x => x * x;\n\nConsole.WriteLine(elevarAlCuadrado(5));\n")),(0,o.kt)("p",null,"La salida del c\xf3digo anterior es ",(0,o.kt)("em",{parentName:"p"},"25"),"."),(0,o.kt)("p",null,"Otro ejemplo con una instrucci\xf3n lambda:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'Action<string> saludar = nombre =>\n{\n    string saludo = $"\xa1Hola {nombre}!";\n    Console.WriteLine(saludo);\n};\n\nsaludar("Mundo");\n')),(0,o.kt)("p",null,"La salida del c\xf3digo anterior es ",(0,o.kt)("em",{parentName:"p"},"\xa1Hola Mundo!"),"."))}u.isMDXComponent=!0}}]);