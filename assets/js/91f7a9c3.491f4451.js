"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[1794],{3905:function(e,o,a){a.d(o,{Zo:function(){return c},kt:function(){return m}});var n=a(7294);function t(e,o,a){return o in e?Object.defineProperty(e,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[o]=a,e}function l(e,o){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);o&&(n=n.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var o=1;o<arguments.length;o++){var a=null!=arguments[o]?arguments[o]:{};o%2?l(Object(a),!0).forEach((function(o){t(e,o,a[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(a,o))}))}return e}function d(e,o){if(null==e)return{};var a,n,t=function(e,o){if(null==e)return{};var a,n,t={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],o.indexOf(a)>=0||(t[a]=e[a]);return t}(e,o);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],o.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var i=n.createContext({}),s=function(e){var o=n.useContext(i),a=o;return e&&(a="function"==typeof e?e(o):r(r({},o),e)),a},c=function(e){var o=s(e.components);return n.createElement(i.Provider,{value:o},e.children)},u={inlineCode:"code",wrapper:function(e){var o=e.children;return n.createElement(n.Fragment,{},o)}},p=n.forwardRef((function(e,o){var a=e.components,t=e.mdxType,l=e.originalType,i=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=s(a),m=t,g=p["".concat(i,".").concat(m)]||p[m]||u[m]||l;return a?n.createElement(g,r(r({ref:o},c),{},{components:a})):n.createElement(g,r({ref:o},c))}));function m(e,o){var a=arguments,t=o&&o.mdxType;if("string"==typeof e||t){var l=a.length,r=new Array(l);r[0]=p;var d={};for(var i in o)hasOwnProperty.call(o,i)&&(d[i]=o[i]);d.originalType=e,d.mdxType="string"==typeof e?e:t,r[1]=d;for(var s=2;s<l;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},3055:function(e,o,a){a.r(o),a.d(o,{assets:function(){return c},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return d},metadata:function(){return s},toc:function(){return u}});var n=a(7462),t=a(3366),l=(a(7294),a(3905)),r=["components"],d={title:"Apuntes - Delegados y expresiones lambda",sidebar_label:"Delegados",slug:"/clases/delegados/apuntes/delegados",hide_table_of_contents:!1,hide_title:!1,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},i=void 0,s={unversionedId:"clases/delegados/Apuntes/delegados",id:"clases/delegados/Apuntes/delegados",title:"Apuntes - Delegados y expresiones lambda",description:"Delegados",source:"@site/docs/clases/18-delegados/Apuntes/00-delegados.md",sourceDirName:"clases/18-delegados/Apuntes",slug:"/clases/delegados/apuntes/delegados",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/delegados/apuntes/delegados",draft:!1,tags:[],version:"current",lastUpdatedBy:"Mauricio Cerizza",lastUpdatedAt:1653861773,formattedLastUpdatedAt:"5/29/2022",sidebarPosition:0,frontMatter:{title:"Apuntes - Delegados y expresiones lambda",sidebar_label:"Delegados",slug:"/clases/delegados/apuntes/delegados",hide_table_of_contents:!1,hide_title:!1,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},sidebar:"Clases",previous:{title:"\xcdndice",permalink:"/programacion_2_laboratorio_2_apuntes/docs/delegados"},next:{title:"Expresiones lambda",permalink:"/programacion_2_laboratorio_2_apuntes/docs/clases/delegados/apuntes/expresiones-lambda"}},c={},u=[{value:"Delegados",id:"delegados",level:2},{value:"Usos comunes de los delegados",id:"usos-comunes-de-los-delegados",level:3},{value:"Delegados vs punturos a funci\xf3n",id:"delegados-vs-punturos-a-funci\xf3n",level:3},{value:"Declaraci\xf3n de delegados",id:"declaraci\xf3n-de-delegados",level:3},{value:"Instanciar un delegado",id:"instanciar-un-delegado",level:3},{value:"Usar un delegado",id:"usar-un-delegado",level:3},{value:"Delegados predefinidos",id:"delegados-predefinidos",level:2},{value:"Delegado Action",id:"delegado-action",level:3},{value:"Delegado Func",id:"delegado-func",level:3},{value:"Delegado Predicate",id:"delegado-predicate",level:3},{value:"Delegados multidifusi\xf3n",id:"delegados-multidifusi\xf3n",level:2},{value:"Agregar m\xe9todos a la lista de invocaci\xf3n",id:"agregar-m\xe9todos-a-la-lista-de-invocaci\xf3n",level:3},{value:"Eliminar m\xe9todos de la lista de invocaci\xf3n",id:"eliminar-m\xe9todos-de-la-lista-de-invocaci\xf3n",level:3},{value:"Tipos de referencia y delegados multidifusi\xf3n",id:"tipos-de-referencia-y-delegados-multidifusi\xf3n",level:4},{value:"Obtener la lista de invocaci\xf3n",id:"obtener-la-lista-de-invocaci\xf3n",level:3},{value:"Resumen",id:"resumen",level:2}],p={toc:u};function m(e){var o=e.components,a=(0,t.Z)(e,r);return(0,l.kt)("wrapper",(0,n.Z)({},p,a,{components:o,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"delegados"},"Delegados"),(0,l.kt)("p",null,"Un ",(0,l.kt)("strong",{parentName:"p"},"delegado")," es un tipo que representa referencias a m\xe9todos con una firma particular. Recordemos que la firma de los m\xe9todos son los par\xe1metros que recibe y el tipo que retorna. "),(0,l.kt)("p",null,"Los delegados son ",(0,l.kt)("strong",{parentName:"p"},"tipos de referencia"),", al instanciarlos (son objetos) podemos asociar su instancia con cualquier m\xe9todo que tenga una firma compatible. A trav\xe9s de la instancia del delegado podemos invocar al m\xe9todo referenciado. "),(0,l.kt)("p",null,"Todos los delegados derivan de la clase ",(0,l.kt)("inlineCode",{parentName:"p"},"Delegate")," y son sellados (no se puede heredar de ellos). No se permite que otros tipos de datos deriven de ",(0,l.kt)("inlineCode",{parentName:"p"},"Delegate"),"."),(0,l.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/K335VO1bRWE",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,l.kt)("h3",{id:"usos-comunes-de-los-delegados"},"Usos comunes de los delegados"),(0,l.kt)("p",null,"Como un delegado instanciado es un objeto, se pueden pasar como argumento de m\xe9todos o ser asignados a un propiedad. Permiten a un m\xe9todo aceptar un delegado como par\xe1metro y llamar al delegado en alg\xfan momento futuro. Esto se conoce como ",(0,l.kt)("strong",{parentName:"p"},"devoluci\xf3n de llamada asincr\xf3nica (",(0,l.kt)("em",{parentName:"strong"},"asynchronous callback"),")"),", y es una forma com\xfan de notificar al invocador cuando una tarea prolongada ha terminado. "),(0,l.kt)("p",null,"Otro uso com\xfan es definir un m\xe9todo de comparaci\xf3n y pasarlo como criterio a un m\xe9todo de ordenamiento o filtrado. Un ejemplo es el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"Sort")," de la clase ",(0,l.kt)("inlineCode",{parentName:"p"},"List"),", al cual se podemos pasar el m\xe9todo que contiene el criterio de comparaci\xf3n para el ordenamiento. "),(0,l.kt)("p",null,"Son particularmente \xfatiles cuando el c\xf3digo que contiene el m\xe9todo a invocar se desarrolla de manera independiente al c\xf3digo invocador, ya que los delegados desacoplan a la clase que los declara de la clase que los usa. "),(0,l.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/4Qvio8Tezv0",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,l.kt)("h3",{id:"delegados-vs-punturos-a-funci\xf3n"},"Delegados vs punturos a funci\xf3n"),(0,l.kt)("p",null,"A diferencia de los punteros a funci\xf3n de C y C++, los delegados son completamente orientados a objetos y ",(0,l.kt)("strong",{parentName:"p"},"encapsulan tanto la referencia al m\xe9todo como la instancia a la que pertenece"),". Adem\xe1s, los delegados cuentan con seguridad de tipos."),(0,l.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/Nf8iCMN2MCs",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,l.kt)("h3",{id:"declaraci\xf3n-de-delegados"},"Declaraci\xf3n de delegados"),(0,l.kt)("p",null,"Los delegados se declaran con la palabra reservada ",(0,l.kt)("inlineCode",{parentName:"p"},"delegate")," seguido del tipo de retorno, el nombre del tipo delegado y los par\xe1metros de entrada. Los par\xe1metros y el tipo de retorno s\xf3lo cumplen la funci\xf3n de definir qu\xe9 clase de m\xe9todos puede referenciar el delegado, conservando la seguridad de tipos que caracteriza al lenguaje. "),(0,l.kt)("p",null,"A continuaci\xf3n podemos ver un ejemplo. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"public delegate int RealizarCalculo(int x, int y);\n")),(0,l.kt)("p",null,"Los delegados no tienen cuerpo ya que no definen un m\xe9todo. Su declaraci\xf3n simplemente indica que una instancia de ese delegado podr\xe1 encapsular cualquier m\xe9todo con la firma apropiada. No importa qu\xe9 hace o c\xf3mo lo hace, s\xf3lo que los par\xe1metros de entrada y el tipo de retorno coincidan con los del delegado. "),(0,l.kt)("p",null,"Como con cualquier otro tipo de dato, la declaraci\xf3n de un delegado puede ir dentro de un namespace o anidado en otro tipo (s\xf3lo si tiene una relaci\xf3n muy estrecha con el tipo contenedor)."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Nota")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"En el contexto de la sobrecarga de m\xe9todos s\xf3lo se comparan los par\xe1metros de entrada, pero no el valor de retorno. Pero en el contexto de los delegados, la firma se compara incluyendo tambi\xe9n el tipo de retorno. "))),(0,l.kt)("h3",{id:"instanciar-un-delegado"},"Instanciar un delegado"),(0,l.kt)("p",null,"Instanciar un delegado requiere indicar qu\xe9 m\xe9todo encapsular\xe1."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'// Declarar un delegado\npublic delegate void DelegadoNotificacion(string str);\n\n// M\xe9todo con la misma firma que el delegado. \nstatic void Notificar(string nombre)\n{\n    Console.WriteLine($"Se recibi\xf3 una notificaci\xf3n para: {nombre}.");\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// Instanciar el delegado.\nDelegadoNotificacion delegadoNotificacion = new DelegadoNotificacion(Notificar);\n")),(0,l.kt)("p",null,"Desde C# 2.0 tambi\xe9n se puede instanciar el delegado asign\xe1ndole directamente la referencia al m\xe9todo que encapsular\xe1. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// Instanciar el delegado\nDelegadoNotificacion delegadoNotificacion = Notificar;\n")),(0,l.kt)("p",null,"Cualquier m\xe9todo accesible definido en una clase o estructura puede ser asignado al delegado. El m\xe9todo puede ser est\xe1tico o de instancia. Cuando se trata de un m\xe9todo de instancia, el delegado tambi\xe9n encapsula a la instancia a la que pertenece ese m\xe9todo. Cuando se trata de un m\xe9todo est\xe1tico s\xf3lo almecena la referencia al m\xe9todo. "),(0,l.kt)("h3",{id:"usar-un-delegado"},"Usar un delegado"),(0,l.kt)("p",null,"La forma de usar una instancia de un delegado es igual a la de un m\xe9todo. Colocamos el nombre de la variable que contiene la instancia del delegado y entre par\xe9ntesis le pasamos los argumentos para los par\xe1metros de entrada definidos en su firma. En ese momento el delegado invocar\xe1 al m\xe9todo que referencia y le pasar\xe1 los argumentos suministrados. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'// Usar el delegado\ndelegadoNotificacion("Juan Perez");\n')),(0,l.kt)("p",null,"La salida del ejemplo anterior ser\xe1:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Se recibi\xf3 una notificaci\xf3n para: Juan Perez.\n")),(0,l.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/8tgX7WapHZg",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,l.kt)("h2",{id:"delegados-predefinidos"},"Delegados predefinidos"),(0,l.kt)("p",null,"La ",(0,l.kt)("em",{parentName:"p"},"base class library")," trae algunos tipos delegados ",(0,l.kt)("strong",{parentName:"p"},"gen\xe9ricos")," que cubren la mayor\xeda de los usos y nos evitan declarar nuevos delegados personalizados."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Action"),": Representa m\xe9todos que no retornan nada y tienen entre 0 y 16 par\xe1metros de entrada."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Func"),": Representa m\xe9todos que s\xed retornan algo y tienen entre 0 y 16 par\xe1metros de entrada."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Predicate"),": Representa m\xe9todos que retornan bool y reciben un par\xe1metro de entrada.")),(0,l.kt)("p",null,"En los tres casos, tanto el tipo de retorno como de los par\xe1metros de entrada se definir\xe1 a partir del argumento proporcionado a los tipos gen\xe9ricos. "),(0,l.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/NGV0Zt8UVHk",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,l.kt)("h3",{id:"delegado-action"},"Delegado Action"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Action")," es un delegado que presenta m\xe9todos que no retornan valores. "),(0,l.kt)("p",null,"Si lo escribimos sin pasarle argumentos a sus tipos gen\xe9ricos, representa m\xe9todos que no retornan ni reciben nada. De lo contrario, representa m\xe9todos que no retornan nada y tienen entre 1 y 16 par\xe1metros de entrada."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'class Program\n{\n    public static void Saludar(string nombre)\n    {\n        Console.WriteLine($"\xa1Hola {nombre}!");\n    }\n\n    public static void SaludarConColores(string nombre, ConsoleColor colorLetra, ConsoleColor colorFondo)\n    {\n        Console.BackgroundColor = ConsoleColor.Red;\n        Console.ForegroundColor = ConsoleColor.Yellow;\n        Saludar(nombre);\n        Console.BackgroundColor = ConsoleColor.Black;\n        Console.ForegroundColor = ConsoleColor.Gray;\n    }\n\n    public static void SaludarAlMundo()\n    {\n        Console.WriteLine("\xa1Hola mundo!");\n    }\n\n    static void Main(string[] args)\n    {\n        // Declaraci\xf3n e inicializaci\xf3n\n\n        // Delegado Action para m\xe9todos que no retornan ni reciben nada.\n        Action delegadoAction = SaludarAlMundo;\n\n        // Delegado Action para m\xe9todos que no retornan nada pero reciben 1 a 16 par\xe1metros.\n        Action<string> delegadoActionConUnParametro = Saludar;\n\n        // Cuando hay varios par\xe1metros de entrada, se indican sus tipos en orden como argumentos de los tipos gen\xe9ricos del delegado.\n        Action<string, ConsoleColor, ConsoleColor> delegadoActionConTresParametros = SaludarConColores;\n\n        // Invocaci\xf3n de los delegados\n        delegadoAction();\n\n        delegadoActionConUnParametro("UTN");\n\n        delegadoActionConTresParametros("UTN", ConsoleColor.Red, ConsoleColor.Gray);\n    }\n}\n')),(0,l.kt)("h3",{id:"delegado-func"},"Delegado Func"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Func")," es un delegado que presenta m\xe9todos que s\xed retornan valores. "),(0,l.kt)("p",null,"Si lo escribimos pas\xe1ndole un s\xf3lo argumento a sus tipo gen\xe9rico, representa m\xe9todos que retornan ese tipo. Si le pasamos m\xe1s de un argumento gen\xe9rico, representa m\xe9todos que retornan ese tipo y tienen entre 1 y 16 par\xe1metros de entrada."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"\n\n")),(0,l.kt)("h3",{id:"delegado-predicate"},"Delegado Predicate"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Predicate")," es un delegado que se suele utilizar para definir un conjunto de criterios y determinar cu\xe1ndo el objeto especificado cumple con dichos criterios. Representa m\xe9todos que retornan ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")," y reciben un objeto cuyo tipo ser\xe1 indicado como argumento del tipo gen\xe9rico. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"\n\n")),(0,l.kt)("h2",{id:"delegados-multidifusi\xf3n"},"Delegados multidifusi\xf3n"),(0,l.kt)("p",null,"Un delegado puede refenciar m\xe1s de un m\xe9todo y llamarlos a todos cuando es accionado. Cuando un delegado apunta a m\xfaltiples m\xe9todos se lo llama ",(0,l.kt)("strong",{parentName:"p"},"delegado multidifusi\xf3n (",(0,l.kt)("em",{parentName:"strong"},"multicast delegate"),")"),". "),(0,l.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/XPDKu4sz1cY",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,l.kt)("h3",{id:"agregar-m\xe9todos-a-la-lista-de-invocaci\xf3n"},"Agregar m\xe9todos a la lista de invocaci\xf3n"),(0,l.kt)("p",null,"Para agregar m\xe9todos a la lista de invocaci\xf3n de un delegado multidifusi\xf3n se utilizan los operadores ",(0,l.kt)("inlineCode",{parentName:"p"},"+")," o ",(0,l.kt)("inlineCode",{parentName:"p"},"+="),". Recordemos que todos los m\xe9todos deben tener una firma que corresponda al tipo delegado. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"public delegate void Delegado(string str);\n\npublic class Clase\n{\n    public void MetodoUno(string str) { }\n    public void MetodoDos(string str) { }\n    public void MetodoTres(string str) { }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Instancio el objeto que contiene los m\xe9todos que encapsular\xe1 el delegado.\n        Clase objeto = new Clase();\n\n        // Instancio dos delegados.\n        Delegado delegadoUno = objeto.MetodoUno;\n        Delegado delegadoDos = objeto.MetodoDos;\n\n        // Ambos tipos de asignaci\xf3n son v\xe1lidos.\n        Delegado delegadoMultidifusion = delegadoUno + delegadoDos;\n        delegadoMultidifusion += objeto.MetodoTres;\n    }\n}\n")),(0,l.kt)("p",null,"En el ejemplo anterior, ",(0,l.kt)("inlineCode",{parentName:"p"},"delegadoMultidifusion")," contiene tres m\xe9todos en su lista de invocaci\xf3n. Cuando el delegado sea invocado, los tres m\xe9todos ser\xe1n llamados en orden. "),(0,l.kt)("h3",{id:"eliminar-m\xe9todos-de-la-lista-de-invocaci\xf3n"},"Eliminar m\xe9todos de la lista de invocaci\xf3n"),(0,l.kt)("p",null,"Para eliminar un m\xe9todo de la lista de invocaci\xf3n se utilizan los operadores ",(0,l.kt)("inlineCode",{parentName:"p"},"-")," o ",(0,l.kt)("inlineCode",{parentName:"p"},"-="),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// Eliminar el delegadoUno\ndelegadoMultidifusion -= delegadoUno;\n\n// Copiar delegadoMultidifusion mientras se elimina delegadoDos\nDelegado delegadoSimple = delegadoMultidifusion - delegadoDos;\n")),(0,l.kt)("h4",{id:"tipos-de-referencia-y-delegados-multidifusi\xf3n"},"Tipos de referencia y delegados multidifusi\xf3n"),(0,l.kt)("p",null,"Cuando los argumentos del delegado sean tipos de referencia, cualquier cambio que efectue el primer m\xe9todo sobre los mismos ser\xe1n visibles para el siguiente m\xe9todo. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'public delegate void Delegado(Numero n);\n\npublic class Numero\n{\n    private int valor;\n\n    public int Valor\n    {\n        get\n        {\n            return valor;\n        }\n        set\n        {\n            valor = value;\n        }\n    }\n\n    public Numero(int valor)\n    {\n        this.valor = valor;\n    }\n}\n\npublic class Clase\n{\n    public void SumarDos(Numero n) \n    {\n        n.Valor = n.Valor + 2;\n    }\n\n    public void MultiplicarPorDos(Numero n)\n    {\n        n.Valor = n.Valor * 2;\n    }\n\n    public void ElevarAlCuadrado(Numero n)\n    {\n        n.Valor = n.Valor * n.Valor;\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Instancio el objeto que contiene los m\xe9todos que encapsular\xe1 el delegado.\n        Clase objeto = new Clase();\n\n        // Instancio dos delegados.\n        Delegado delegadoUno = objeto.SumarDos;\n        Delegado delegadoDos = objeto.MultiplicarPorDos;\n\n        // Ambos tipos de asignaci\xf3n son v\xe1lidos.\n        Delegado delegadoMultidifusion = delegadoUno + delegadoDos;\n        delegadoMultidifusion += objeto.ElevarAlCuadrado;\n\n        \n        Numero numero = new Numero(5);\n        // Invoco al delegado\n        delegadoMultidifusion(numero);\n\n        Console.WriteLine($"Valor: {numero.Valor}");\n    }\n}\n')),(0,l.kt)("p",null,"La salida del c\xf3digo anterior es:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Valor: 196\n")),(0,l.kt)("p",null,"Instanciamos ",(0,l.kt)("inlineCode",{parentName:"p"},"Numero")," con el valor ",(0,l.kt)("inlineCode",{parentName:"p"},"5"),". Al invocar al delegado primero llama al m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"SumarDos")," que suma dos al valor de ",(0,l.kt)("inlineCode",{parentName:"p"},"Numero"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"5 + 2 = 7"),". Luego llama al segundo m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"MultiplicarPorDos")," que multiplica por dos al valor que tiene ",(0,l.kt)("inlineCode",{parentName:"p"},"Numero")," en ese momento: ",(0,l.kt)("inlineCode",{parentName:"p"},"7 * 2 = 14"),". Por \xfaltimo, llama a ",(0,l.kt)("inlineCode",{parentName:"p"},"ElevarAlCuadrado"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"14 * 14 = 196"),"."),(0,l.kt)("h3",{id:"obtener-la-lista-de-invocaci\xf3n"},"Obtener la lista de invocaci\xf3n"),(0,l.kt)("p",null,"Como todos los delegados derivan de ",(0,l.kt)("inlineCode",{parentName:"p"},"System.Delegate"),", los m\xe9todos y propiedades definidos por esa clase ser\xe1n compartidos por todos los delegados que declaremos. Por ejemplo, para obtener todos los m\xe9todos referenciados por un delegado multidifusi\xf3n podemos usar el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"GetInvocationList"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'static void Main(string[] args)\n{\n    // Instancio el objeto que contiene los m\xe9todos que encapsular\xe1 el delegado.\n    Clase objeto = new Clase();\n\n    // Instancio dos delegados.\n    Delegado delegadoUno = objeto.SumarDos;\n    Delegado delegadoDos = objeto.MultiplicarPorDos;\n\n    // Ambos tipos de asignaci\xf3n son v\xe1lidos.\n    Delegado delegadoMultidifusion = delegadoUno + delegadoDos;\n    delegadoMultidifusion += objeto.ElevarAlCuadrado;\n\n    Console.WriteLine($"N\xfamero de m\xe9todos referenciados: {delegadoMultidifusion.GetInvocationList().Length}\\n");\n\n    Console.WriteLine("M\xe9todos referenciados:\\n");\n\n    foreach (Delegate delegado in delegadoMultidifusion.GetInvocationList())\n    {\n        Console.WriteLine(delegado.Method.Name); \n    }\n}\n')),(0,l.kt)("p",null,"La salida del c\xf3digo anterior:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"N\xfamero de m\xe9todos referenciados: 3\n\nM\xe9todos referenciados:\n\nSumarDos\nMultiplicarPorDos\nElevarAlCuadrado\n")),(0,l.kt)("h2",{id:"resumen"},"Resumen"),(0,l.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/3R_bw_MtAGI",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}))}m.isMDXComponent=!0}}]);